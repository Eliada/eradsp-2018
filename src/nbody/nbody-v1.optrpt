Intel(R) Advisor can now assist with vectorization and show optimization
  report messages with your source code.
See "https://software.intel.com/en-us/intel-advisor-xe" for details.

Intel(R) C++ Intel(R) 64 Compiler for applications running on Intel(R) 64, Version 18.0.1.163 Build 20171018

Compiler options: -O3 -fopenmp -fp-model fast=2 -qopt-report=5 -g -xhost -DDOUBLE -o nbody-v1d

    Report from: Interprocedural optimizations [ipo]

  WHOLE PROGRAM (SAFE) [EITHER METHOD]: false
  WHOLE PROGRAM (SEEN) [TABLE METHOD]: false
  WHOLE PROGRAM (READ) [OBJECT READER METHOD]: false

INLINING OPTION VALUES:
  -inline-factor: 100
  -inline-min-size: 30
  -inline-max-size: 230
  -inline-max-total-size: 2000
  -inline-max-per-routine: 10000
  -inline-max-per-compile: 500000

In the inlining report below:
   "sz" refers to the "size" of the routine. The smaller a routine's size,
      the more likely it is to be inlined.
   "isz" refers to the "inlined size" of the routine. This is the amount
      the calling routine will grow if the called routine is inlined into it.
      The compiler generally limits the amount a routine can grow by having
      routines inlined into it.

Begin optimization report for: main(int, char **)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (main(int, char **)) [1/13=7.7%] nbody-v1.cc(101,36)
  -> INLINE: (104,5) bodies(size_t) (isz = 229) (sz = 234)
    -> INLINE: (40,5) randomFill(real *&, real, real, size_t) (isz = 27) (sz = 38)
      -> EXTERN: (32,18) operator new[](std::size_t)
      -> EXTERN: (35,16) rand()
    -> INLINE: (41,5) randomFill(real *&, real, real, size_t) (isz = 27) (sz = 38)
      -> EXTERN: (32,18) operator new[](std::size_t)
      -> EXTERN: (35,16) rand()
    -> INLINE: (42,5) randomFill(real *&, real, real, size_t) (isz = 27) (sz = 38)
      -> EXTERN: (32,18) operator new[](std::size_t)
      -> EXTERN: (35,16) rand()
    -> INLINE: (43,5) randomFill(real *&, real, real, size_t) (isz = 27) (sz = 38)
      -> EXTERN: (32,18) operator new[](std::size_t)
      -> EXTERN: (35,16) rand()
    -> INLINE: (44,5) randomFill(real *&, real, real, size_t) (isz = 27) (sz = 38)
      -> EXTERN: (32,18) operator new[](std::size_t)
      -> EXTERN: (35,16) rand()
    -> INLINE: (45,5) randomFill(real *&, real, real, size_t) (isz = 27) (sz = 38)
      -> EXTERN: (32,18) operator new[](std::size_t)
      -> EXTERN: (35,16) rand()
    -> INLINE: (46,5) randomFill(real *&, real, real, size_t) (isz = 27) (sz = 38)
      -> EXTERN: (32,18) operator new[](std::size_t)
      -> EXTERN: (35,16) rand()
  -> (106,10) std::operator<<<std::char_traits<char>>(std::basic_ostream<char, std::char_traits<char>> &, const char *) (isz = 15) (sz = 24)
     [[ Called routine is noinline  <1>]]
  -> (107,10) std::operator<<<std::char_traits<char>>(std::basic_ostream<char, std::char_traits<char>> &, const char *) (isz = 15) (sz = 24)
     [[ Called routine is noinline  <1>]]
  -> (107,49) std::basic_ostream<char, std::char_traits<char>>::operator<<(std::basic_ostream<char, std::char_traits<char>> *, double) (isz = 1) (sz = 10)
     [[ Called routine is noinline  <1>]]
  -> (107,57) std::operator<<<std::char_traits<char>>(std::basic_ostream<char, std::char_traits<char>> &, char) (isz = 3) (sz = 12)
     [[ Called routine is noinline  <1>]]
  -> (107,64) std::basic_ostream<char, std::char_traits<char>>::operator<<(std::basic_ostream<char, std::char_traits<char>> *, double) (isz = 1) (sz = 10)
     [[ Called routine is noinline  <1>]]
  -> (107,72) std::operator<<<std::char_traits<char>>(std::basic_ostream<char, std::char_traits<char>> &, char) (isz = 3) (sz = 12)
     [[ Called routine is noinline  <1>]]
  -> (107,79) std::basic_ostream<char, std::char_traits<char>>::operator<<(std::basic_ostream<char, std::char_traits<char>> *, double) (isz = 1) (sz = 10)
     [[ Called routine is noinline  <1>]]
  -> (107,87) std::operator<<<std::char_traits<char>>(std::basic_ostream<char, std::char_traits<char>> &, const char *) (isz = 15) (sz = 24)
     [[ Called routine is noinline  <1>]]
  -> (108,10) std::operator<<<std::char_traits<char>>(std::basic_ostream<char, std::char_traits<char>> &, const char *) (isz = 15) (sz = 24)
     [[ Called routine is noinline  <1>]]
  -> (108,48) std::basic_ostream<char, std::char_traits<char>>::operator<<(std::basic_ostream<char, std::char_traits<char>> *, double) (isz = 1) (sz = 10)
     [[ Called routine is noinline  <1>]]
  -> (108,58) std::operator<<<std::char_traits<char>>(std::basic_ostream<char, std::char_traits<char>> &, char) (isz = 3) (sz = 12)
     [[ Called routine is noinline  <1>]]
  -> (108,65) std::basic_ostream<char, std::char_traits<char>>::operator<<(std::basic_ostream<char, std::char_traits<char>> *, double) (isz = 1) (sz = 10)
     [[ Called routine is noinline  <1>]]
  -> (108,75) std::operator<<<std::char_traits<char>>(std::basic_ostream<char, std::char_traits<char>> &, char) (isz = 3) (sz = 12)
     [[ Called routine is noinline  <1>]]
  -> (108,82) std::basic_ostream<char, std::char_traits<char>>::operator<<(std::basic_ostream<char, std::char_traits<char>> *, double) (isz = 1) (sz = 10)
     [[ Called routine is noinline  <1>]]
  -> (108,92) std::operator<<<std::char_traits<char>>(std::basic_ostream<char, std::char_traits<char>> &, const char *) (isz = 15) (sz = 24)
     [[ Called routine is noinline  <1>]]
  -> EXTERN: (110,17) omp_get_wtime()
  -> (116,9) Newton(size_t, real) (isz = 234) (sz = 241)
     [[ Called routine is noinline  <1>]]
  -> EXTERN: (118,10) omp_get_wtime()
  -> (120,10) std::operator<<<std::char_traits<char>>(std::basic_ostream<char, std::char_traits<char>> &, const char *) (isz = 15) (sz = 24)
     [[ Called routine is noinline  <1>]]
  -> (121,10) std::operator<<<std::char_traits<char>>(std::basic_ostream<char, std::char_traits<char>> &, const char *) (isz = 15) (sz = 24)
     [[ Called routine is noinline  <1>]]
  -> (121,49) std::basic_ostream<char, std::char_traits<char>>::operator<<(std::basic_ostream<char, std::char_traits<char>> *, double) (isz = 1) (sz = 10)
     [[ Called routine is noinline  <1>]]
  -> (121,57) std::operator<<<std::char_traits<char>>(std::basic_ostream<char, std::char_traits<char>> &, char) (isz = 3) (sz = 12)
     [[ Called routine is noinline  <1>]]
  -> (121,64) std::basic_ostream<char, std::char_traits<char>>::operator<<(std::basic_ostream<char, std::char_traits<char>> *, double) (isz = 1) (sz = 10)
     [[ Called routine is noinline  <1>]]
  -> (121,72) std::operator<<<std::char_traits<char>>(std::basic_ostream<char, std::char_traits<char>> &, char) (isz = 3) (sz = 12)
     [[ Called routine is noinline  <1>]]
  -> (121,79) std::basic_ostream<char, std::char_traits<char>>::operator<<(std::basic_ostream<char, std::char_traits<char>> *, double) (isz = 1) (sz = 10)
     [[ Called routine is noinline  <1>]]
  -> (121,87) std::operator<<<std::char_traits<char>>(std::basic_ostream<char, std::char_traits<char>> &, const char *) (isz = 15) (sz = 24)
     [[ Called routine is noinline  <1>]]
  -> (122,10) std::operator<<<std::char_traits<char>>(std::basic_ostream<char, std::char_traits<char>> &, const char *) (isz = 15) (sz = 24)
     [[ Called routine is noinline  <1>]]
  -> (122,48) std::basic_ostream<char, std::char_traits<char>>::operator<<(std::basic_ostream<char, std::char_traits<char>> *, double) (isz = 1) (sz = 10)
     [[ Called routine is noinline  <1>]]
  -> (122,58) std::operator<<<std::char_traits<char>>(std::basic_ostream<char, std::char_traits<char>> &, char) (isz = 3) (sz = 12)
     [[ Called routine is noinline  <1>]]
  -> (122,65) std::basic_ostream<char, std::char_traits<char>>::operator<<(std::basic_ostream<char, std::char_traits<char>> *, double) (isz = 1) (sz = 10)
     [[ Called routine is noinline  <1>]]
  -> (122,75) std::operator<<<std::char_traits<char>>(std::basic_ostream<char, std::char_traits<char>> &, char) (isz = 3) (sz = 12)
     [[ Called routine is noinline  <1>]]
  -> (122,82) std::basic_ostream<char, std::char_traits<char>>::operator<<(std::basic_ostream<char, std::char_traits<char>> *, double) (isz = 1) (sz = 10)
     [[ Called routine is noinline  <1>]]
  -> (122,92) std::operator<<<std::char_traits<char>>(std::basic_ostream<char, std::char_traits<char>> &, const char *) (isz = 15) (sz = 24)
     [[ Called routine is noinline  <1>]]
  -> (123,10) std::operator<<<std::char_traits<char>>(std::basic_ostream<char, std::char_traits<char>> &, const char *) (isz = 15) (sz = 24)
     [[ Called routine is noinline  <1>]]
  -> (123,25) std::basic_ostream<char, std::char_traits<char>>::operator<<(std::basic_ostream<char, std::char_traits<char>> *, double) (isz = 1) (sz = 10)
     [[ Called routine is noinline  <1>]]
  -> (123,31) std::operator<<<std::char_traits<char>>(std::basic_ostream<char, std::char_traits<char>> &, const char *) (isz = 15) (sz = 24)
     [[ Called routine is noinline  <1>]]
  -> INLINE: (125,5) cleanBodies() (isz = 41) (sz = 44)
    -> EXTERN: (50,5) operator delete[](void *)
    -> EXTERN: (51,5) operator delete[](void *)
    -> EXTERN: (52,5) operator delete[](void *)
    -> EXTERN: (53,5) operator delete[](void *)
    -> EXTERN: (54,5) operator delete[](void *)
    -> EXTERN: (55,5) operator delete[](void *)
    -> EXTERN: (56,5) operator delete[](void *)


    Report from: Offload optimizations [offload]

OFFLOAD:main(113,5):  Offload to target MIC 1
 Evaluate length/align/alloc_if/free_if/alloc/into expressions
   Modifier expression assigned to __offload_alloc_if.77
   Modifier expression assigned to __offload_free_if.78
   Modifier expression assigned to __offload_alloc_if.80
   Modifier expression assigned to __offload_free_if.81
   Modifier expression assigned to __offload_alloc_if.83
   Modifier expression assigned to __offload_free_if.84
   Modifier expression assigned to __offload_alloc_if.86
   Modifier expression assigned to __offload_free_if.87
   Modifier expression assigned to __offload_alloc_if.89
   Modifier expression assigned to __offload_free_if.90
   Modifier expression assigned to __offload_alloc_if.92
   Modifier expression assigned to __offload_free_if.93
   Modifier expression assigned to __offload_alloc_if.95
   Modifier expression assigned to __offload_free_if.96
 Data sent from host to target
       x, pointer to array reference expression with base
       y, pointer to array reference expression with base
       z, pointer to array reference expression with base
       vx, pointer to array reference expression with base
       vy, pointer to array reference expression with base
       vz, pointer to array reference expression with base
       m, pointer to array reference expression with base
 Data received by host from target

OFFLOAD:main(117,5):  Offload to target MIC 1
 Evaluate length/align/alloc_if/free_if/alloc/into expressions
   Modifier expression assigned to __offload_alloc_if.98
   Modifier expression assigned to __offload_free_if.99
   Modifier expression assigned to __offload_alloc_if.101
   Modifier expression assigned to __offload_free_if.102
   Modifier expression assigned to __offload_alloc_if.104
   Modifier expression assigned to __offload_free_if.105
   Modifier expression assigned to __offload_alloc_if.107
   Modifier expression assigned to __offload_free_if.108
   Modifier expression assigned to __offload_alloc_if.110
   Modifier expression assigned to __offload_free_if.111
   Modifier expression assigned to __offload_alloc_if.113
   Modifier expression assigned to __offload_free_if.114
   Modifier expression assigned to __offload_alloc_if.116
   Modifier expression assigned to __offload_free_if.117
 Data sent from host to target
 Data received by host from target
       x, pointer to array reference expression with base
       y, pointer to array reference expression with base
       z, pointer to array reference expression with base


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at nbody-v1.cc(34,5) inlined into nbody-v1.cc(104,5)
   remark #15527: loop was not vectorized: function call to rand() cannot be vectorized   [ nbody-v1.cc(35,16) ]
LOOP END

LOOP BEGIN at nbody-v1.cc(34,5) inlined into nbody-v1.cc(104,5)
   remark #15527: loop was not vectorized: function call to rand() cannot be vectorized   [ nbody-v1.cc(35,16) ]
LOOP END

LOOP BEGIN at nbody-v1.cc(34,5) inlined into nbody-v1.cc(104,5)
   remark #15527: loop was not vectorized: function call to rand() cannot be vectorized   [ nbody-v1.cc(35,16) ]
LOOP END

LOOP BEGIN at nbody-v1.cc(34,5) inlined into nbody-v1.cc(104,5)
   remark #15527: loop was not vectorized: function call to rand() cannot be vectorized   [ nbody-v1.cc(35,16) ]
LOOP END

LOOP BEGIN at nbody-v1.cc(34,5) inlined into nbody-v1.cc(104,5)
   remark #15527: loop was not vectorized: function call to rand() cannot be vectorized   [ nbody-v1.cc(35,16) ]
LOOP END

LOOP BEGIN at nbody-v1.cc(34,5) inlined into nbody-v1.cc(104,5)
   remark #15527: loop was not vectorized: function call to rand() cannot be vectorized   [ nbody-v1.cc(35,16) ]
LOOP END

LOOP BEGIN at nbody-v1.cc(34,5) inlined into nbody-v1.cc(104,5)
   remark #15527: loop was not vectorized: function call to rand() cannot be vectorized   [ nbody-v1.cc(35,16) ]
LOOP END

LOOP BEGIN at nbody-v1.cc(115,5)
   remark #15382: vectorization support: call to function Newton(size_t, real) cannot be vectorized   [ nbody-v1.cc(116,9) ]
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
LOOP END

    Report from: Code generation optimizations [cg]

nbody-v1.cc(113,5):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (32, 0)
nbody-v1.cc(113,5):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (32, 0)
nbody-v1.cc(113,5):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (32, 0)
nbody-v1.cc(113,5):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (32, 0)
nbody-v1.cc(113,5):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (32, 0)
nbody-v1.cc(113,5):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (32, 0)
nbody-v1.cc(113,5):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (32, 0)
nbody-v1.cc(113,5):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (32, 0)
nbody-v1.cc(113,5):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (32, 0)
nbody-v1.cc(113,5):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (32, 0)
nbody-v1.cc(113,5):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (32, 0)
nbody-v1.cc(113,5):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (32, 0)
nbody-v1.cc(113,5):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (32, 0)
nbody-v1.cc(113,5):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (32, 0)
nbody-v1.cc(113,5):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (32, 0)
nbody-v1.cc(113,5):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (32, 0)
nbody-v1.cc(117,5):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (32, 0)
nbody-v1.cc(117,5):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (32, 0)
nbody-v1.cc(117,5):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (32, 0)
nbody-v1.cc(117,5):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (32, 0)
nbody-v1.cc(117,5):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (32, 0)
nbody-v1.cc(117,5):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (32, 0)
nbody-v1.cc(117,5):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (32, 0)
nbody-v1.cc(117,5):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (32, 0)
nbody-v1.cc(117,5):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (32, 0)
nbody-v1.cc(117,5):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (32, 0)
nbody-v1.cc(117,5):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (32, 0)
nbody-v1.cc(117,5):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (32, 0)
nbody-v1.cc(117,5):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (32, 0)
nbody-v1.cc(117,5):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (32, 0)
nbody-v1.cc(117,5):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (32, 0)
nbody-v1.cc(117,5):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (32, 0)
nbody-v1.cc(101,36):remark #34051: REGISTER ALLOCATION : [main] nbody-v1.cc:101

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   63[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm31 k0-k7]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   43[ rax rdx rcx rsi rdi r8-r13 zmm0-zmm31]
        
    Routine temporaries
        Total         :     438
            Global    :     133
            Local     :     305
        Regenerable   :     120
        Spilled       :       4
        
    Routine stack
        Variables     :    2692 bytes*
            Reads     :       2 [0.00e+00 ~ 0.0%]
            Writes    :     184 [0.00e+00 ~ 0.0%]
        Spills        :      16 bytes*
            Reads     :       2 [2.00e+00 ~ 0.2%]
            Writes    :       2 [2.00e+00 ~ 0.2%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: Newton(size_t, real)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (Newton(size_t, real)) [2/13=15.4%] nbody-v1.cc(59,34)


    Report from: OpenMP optimizations [openmp]

OpenMP Construct at nbody-v1.cc(63,5)
remark #16201: OpenMP DEFINED REGION WAS PARALLELIZED

    Report from: Offload optimizations [offload]

OFFLOAD:Newton(62,5):  Offload to target MIC 1
 Evaluate length/align/alloc_if/free_if/alloc/into expressions
   Modifier expression assigned to __offload_alloc_if.19
   Modifier expression assigned to __offload_free_if.20
   Modifier expression assigned to __offload_alloc_if.22
   Modifier expression assigned to __offload_free_if.23
   Modifier expression assigned to __offload_alloc_if.25
   Modifier expression assigned to __offload_free_if.26
   Modifier expression assigned to __offload_alloc_if.28
   Modifier expression assigned to __offload_free_if.29
   Modifier expression assigned to __offload_alloc_if.31
   Modifier expression assigned to __offload_free_if.32
   Modifier expression assigned to __offload_alloc_if.34
   Modifier expression assigned to __offload_free_if.35
   Modifier expression assigned to __offload_alloc_if.37
   Modifier expression assigned to __offload_free_if.38
 Data sent from host to target
       n, scalar size 8 bytes
       dtG, scalar size 8 bytes
       dt, scalar size 8 bytes
 Data received by host from target
       x, pointer to array reference expression with base
       y, pointer to array reference expression with base
       z, pointer to array reference expression with base
       m, pointer to array reference expression with base
       vx, pointer to array reference expression with base
       vy, pointer to array reference expression with base
       vz, pointer to array reference expression with base


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at nbody-v1.cc(65,9)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at nbody-v1.cc(66,9)
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at nbody-v1.cc(69,13)
      <Peeled loop for vectorization>
         remark #15389: vectorization support: reference *x[j] has unaligned access   [ nbody-v1.cc(70,27) ]
         remark #15389: vectorization support: reference *y[j] has unaligned access   [ nbody-v1.cc(70,45) ]
         remark #15389: vectorization support: reference *z[j] has unaligned access   [ nbody-v1.cc(70,63) ]
         remark #15389: vectorization support: reference *m[j] has unaligned access   [ nbody-v1.cc(72,35) ]
         remark #15381: vectorization support: unaligned access used inside loop body
         remark #15305: vectorization support: vector length 4
         remark #15309: vectorization support: normalized vectorization overhead 0.350
         remark #15301: PEEL LOOP WAS VECTORIZED
      LOOP END

      LOOP BEGIN at nbody-v1.cc(69,13)
         remark #15389: vectorization support: reference *x[j] has unaligned access   [ nbody-v1.cc(70,27) ]
         remark #15389: vectorization support: reference *y[j] has unaligned access   [ nbody-v1.cc(70,45) ]
         remark #15389: vectorization support: reference *z[j] has unaligned access   [ nbody-v1.cc(70,63) ]
         remark #15389: vectorization support: reference *m[j] has unaligned access   [ nbody-v1.cc(72,35) ]
         remark #15381: vectorization support: unaligned access used inside loop body
         remark #15305: vectorization support: vector length 4
         remark #15309: vectorization support: normalized vectorization overhead 0.913
         remark #15301: OpenMP SIMD LOOP WAS VECTORIZED
         remark #15321: Compiler has chosen to target XMM/YMM vector. Try using -qopt-zmm-usage=high to override
         remark #15450: unmasked unaligned unit stride loads: 4 
         remark #15475: --- begin vector cost summary ---
         remark #15476: scalar cost: 100 
         remark #15477: vector cost: 26.000 
         remark #15478: estimated potential speedup: 3.650 
         remark #15488: --- end vector cost summary ---
      LOOP END

      LOOP BEGIN at nbody-v1.cc(78,13)
      <Peeled loop for vectorization>
         remark #15389: vectorization support: reference *x[j] has unaligned access   [ nbody-v1.cc(79,27) ]
         remark #15389: vectorization support: reference *y[j] has unaligned access   [ nbody-v1.cc(79,45) ]
         remark #15389: vectorization support: reference *z[j] has unaligned access   [ nbody-v1.cc(79,63) ]
         remark #15389: vectorization support: reference *m[j] has unaligned access   [ nbody-v1.cc(81,35) ]
         remark #15381: vectorization support: unaligned access used inside loop body
         remark #15305: vectorization support: vector length 4
         remark #15309: vectorization support: normalized vectorization overhead 0.350
         remark #15301: PEEL LOOP WAS VECTORIZED
      LOOP END

      LOOP BEGIN at nbody-v1.cc(78,13)
         remark #15389: vectorization support: reference *x[j] has unaligned access   [ nbody-v1.cc(79,27) ]
         remark #15389: vectorization support: reference *y[j] has unaligned access   [ nbody-v1.cc(79,45) ]
         remark #15389: vectorization support: reference *z[j] has unaligned access   [ nbody-v1.cc(79,63) ]
         remark #15389: vectorization support: reference *m[j] has unaligned access   [ nbody-v1.cc(81,35) ]
         remark #15381: vectorization support: unaligned access used inside loop body
         remark #15305: vectorization support: vector length 4
         remark #15309: vectorization support: normalized vectorization overhead 0.913
         remark #15301: OpenMP SIMD LOOP WAS VECTORIZED
         remark #15321: Compiler has chosen to target XMM/YMM vector. Try using -qopt-zmm-usage=high to override
         remark #15450: unmasked unaligned unit stride loads: 4 
         remark #15475: --- begin vector cost summary ---
         remark #15476: scalar cost: 100 
         remark #15477: vector cost: 26.000 
         remark #15478: estimated potential speedup: 3.650 
         remark #15488: --- end vector cost summary ---
      LOOP END

      LOOP BEGIN at nbody-v1.cc(69,13)
      <Remainder loop for vectorization>
         remark #15389: vectorization support: reference *x[j] has unaligned access   [ nbody-v1.cc(70,27) ]
         remark #15389: vectorization support: reference *y[j] has unaligned access   [ nbody-v1.cc(70,45) ]
         remark #15389: vectorization support: reference *z[j] has unaligned access   [ nbody-v1.cc(70,63) ]
         remark #15389: vectorization support: reference *m[j] has unaligned access   [ nbody-v1.cc(72,35) ]
         remark #15381: vectorization support: unaligned access used inside loop body
         remark #15305: vectorization support: vector length 4
         remark #15309: vectorization support: normalized vectorization overhead 0.350
         remark #15301: REMAINDER LOOP WAS VECTORIZED
      LOOP END

      LOOP BEGIN at nbody-v1.cc(78,13)
      <Remainder loop for vectorization>
         remark #15389: vectorization support: reference *x[j] has unaligned access   [ nbody-v1.cc(79,27) ]
         remark #15389: vectorization support: reference *y[j] has unaligned access   [ nbody-v1.cc(79,45) ]
         remark #15389: vectorization support: reference *z[j] has unaligned access   [ nbody-v1.cc(79,63) ]
         remark #15389: vectorization support: reference *m[j] has unaligned access   [ nbody-v1.cc(81,35) ]
         remark #15381: vectorization support: unaligned access used inside loop body
         remark #15305: vectorization support: vector length 4
         remark #15309: vectorization support: normalized vectorization overhead 0.350
         remark #15301: REMAINDER LOOP WAS VECTORIZED
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at nbody-v1.cc(90,9)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at nbody-v1.cc(90,9)
   <Peeled loop for vectorization>
      remark #15389: vectorization support: reference *(*x+i*8) has unaligned access   [ nbody-v1.cc(92,13) ]
      remark #15389: vectorization support: reference *(*x+i*8) has unaligned access   [ nbody-v1.cc(92,13) ]
      remark #15389: vectorization support: reference *vx[i] has unaligned access   [ nbody-v1.cc(92,21) ]
      remark #15389: vectorization support: reference *(*y+i*8) has unaligned access   [ nbody-v1.cc(93,13) ]
      remark #15389: vectorization support: reference *(*y+i*8) has unaligned access   [ nbody-v1.cc(93,13) ]
      remark #15389: vectorization support: reference *vy[i] has unaligned access   [ nbody-v1.cc(93,21) ]
      remark #15389: vectorization support: reference *(*z+i*8) has unaligned access   [ nbody-v1.cc(94,13) ]
      remark #15389: vectorization support: reference *(*z+i*8) has unaligned access   [ nbody-v1.cc(94,13) ]
      remark #15389: vectorization support: reference *vz[i] has unaligned access   [ nbody-v1.cc(94,21) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15335: peel loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
      remark #15305: vectorization support: vector length 2
      remark #15309: vectorization support: normalized vectorization overhead 0.255
      remark #25015: Estimate of max trip count of loop=3
   LOOP END

   LOOP BEGIN at nbody-v1.cc(90,9)
      remark #15389: vectorization support: reference *(*x+i*8) has unaligned access   [ nbody-v1.cc(92,13) ]
      remark #15389: vectorization support: reference *(*x+i*8) has unaligned access   [ nbody-v1.cc(92,13) ]
      remark #15389: vectorization support: reference *vx[i] has unaligned access   [ nbody-v1.cc(92,21) ]
      remark #15389: vectorization support: reference *(*y+i*8) has unaligned access   [ nbody-v1.cc(93,13) ]
      remark #15389: vectorization support: reference *(*y+i*8) has unaligned access   [ nbody-v1.cc(93,13) ]
      remark #15389: vectorization support: reference *vy[i] has unaligned access   [ nbody-v1.cc(93,21) ]
      remark #15389: vectorization support: reference *(*z+i*8) has unaligned access   [ nbody-v1.cc(94,13) ]
      remark #15389: vectorization support: reference *(*z+i*8) has unaligned access   [ nbody-v1.cc(94,13) ]
      remark #15389: vectorization support: reference *vz[i] has unaligned access   [ nbody-v1.cc(94,21) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 4
      remark #15309: vectorization support: normalized vectorization overhead 1.132
      remark #15301: OpenMP SIMD LOOP WAS VECTORIZED
      remark #15321: Compiler has chosen to target XMM/YMM vector. Try using -qopt-zmm-usage=high to override
      remark #15450: unmasked unaligned unit stride loads: 6 
      remark #15451: unmasked unaligned unit stride stores: 3 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 35 
      remark #15477: vector cost: 9.500 
      remark #15478: estimated potential speedup: 3.500 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at nbody-v1.cc(90,9)
   <Remainder loop for vectorization>
      remark #15389: vectorization support: reference *(*x+i*8) has unaligned access   [ nbody-v1.cc(92,13) ]
      remark #15389: vectorization support: reference *(*x+i*8) has unaligned access   [ nbody-v1.cc(92,13) ]
      remark #15389: vectorization support: reference *vx[i] has unaligned access   [ nbody-v1.cc(92,21) ]
      remark #15389: vectorization support: reference *(*y+i*8) has unaligned access   [ nbody-v1.cc(93,13) ]
      remark #15389: vectorization support: reference *(*y+i*8) has unaligned access   [ nbody-v1.cc(93,13) ]
      remark #15389: vectorization support: reference *vy[i] has unaligned access   [ nbody-v1.cc(93,21) ]
      remark #15389: vectorization support: reference *(*z+i*8) has unaligned access   [ nbody-v1.cc(94,13) ]
      remark #15389: vectorization support: reference *(*z+i*8) has unaligned access   [ nbody-v1.cc(94,13) ]
      remark #15389: vectorization support: reference *vz[i] has unaligned access   [ nbody-v1.cc(94,21) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15335: remainder loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
      remark #15305: vectorization support: vector length 2
      remark #15309: vectorization support: normalized vectorization overhead 0.255
   LOOP END
LOOP END

    Report from: Code generation optimizations [cg]

nbody-v1.cc(62,5):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (32, 0)
nbody-v1.cc(62,5):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (32, 0)
nbody-v1.cc(62,5):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (32, 0)
nbody-v1.cc(62,5):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (32, 0)
nbody-v1.cc(62,5):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (32, 0)
nbody-v1.cc(62,5):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (32, 0)
nbody-v1.cc(62,5):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (32, 0)
nbody-v1.cc(62,5):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (32, 0)
nbody-v1.cc(62,5):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (32, 0)
nbody-v1.cc(62,5):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (32, 0)
nbody-v1.cc(62,5):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (32, 0)
nbody-v1.cc(62,5):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (32, 0)
nbody-v1.cc(62,5):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (32, 0)
nbody-v1.cc(62,5):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (32, 0)
nbody-v1.cc(62,5):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (32, 0)
nbody-v1.cc(62,5):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (32, 0)
nbody-v1.cc(62,5):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (32, 0)
nbody-v1.cc(62,5):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (32, 0)
nbody-v1.cc(62,5):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (32, 0)
nbody-v1.cc(59,34):remark #34051: REGISTER ALLOCATION : [_Z6Newtonmd] nbody-v1.cc:59

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   63[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm31 k0-k7]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   47[ rax rdx rcx rbx rsi rdi r8-r15 zmm0-zmm31 k1]
        
    Routine temporaries
        Total         :     646
            Global    :     130
            Local     :     516
        Regenerable   :     177
        Spilled       :      35
        
    Routine stack
        Variables     :    2244 bytes*
            Reads     :       5 [1.28e+01 ~ 0.2%]
            Writes    :     114 [4.50e+01 ~ 0.9%]
        Spills        :     328 bytes*
            Reads     :      82 [1.41e+02 ~ 2.7%]
            Writes    :      55 [9.02e+01 ~ 1.7%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: std::char_traits<char>::length(const std::char_traits<char>::char_type *)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (std::char_traits<char>::length(const std::char_traits<char>::char_type *)) [6/13=46.2%] /usr/include/c++/4.8.5/bits/char_traits.h(259,7)
  -> EXTERN: (259,16) __builtin_strlen(const char *)


    Report from: Code generation optimizations [cg]

/usr/include/c++/4.8.5/bits/char_traits.h(259,7):remark #34051: REGISTER ALLOCATION : [_ZNSt11char_traitsIcE6lengthEPKc] /usr/include/c++/4.8.5/bits/char_traits.h:259

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   63[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm31 k0-k7]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    3[ rax rdx rdi]
        
    Routine temporaries
        Total         :      12
            Global    :       7
            Local     :       5
        Regenerable   :       0
        Spilled       :       0
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: randomFill(real *&, real, real, size_t)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (randomFill(real *&, real, real, size_t)) [8/13=61.5%] nbody-v1.cc(31,59)
  -> EXTERN: (32,18) operator new[](std::size_t)
  -> EXTERN: (35,16) rand()


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at nbody-v1.cc(34,5)
   remark #15527: loop was not vectorized: function call to rand() cannot be vectorized   [ nbody-v1.cc(35,16) ]
LOOP END

    Report from: Code generation optimizations [cg]

nbody-v1.cc(31,59):remark #34051: REGISTER ALLOCATION : [_Z10randomFillRPdddm] nbody-v1.cc:31

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   63[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm31 k0-k7]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    8[ rax rsi rdi r12-r14 zmm0-zmm1]
        
    Routine temporaries
        Total         :      25
            Global    :      16
            Local     :       9
        Regenerable   :       0
        Spilled       :       6
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :      32 bytes*
            Reads     :       5 [1.29e+01 ~ 13.9%]
            Writes    :       4 [3.80e+00 ~ 4.1%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: bodies(size_t)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (bodies(size_t)) [9/13=69.2%] nbody-v1.cc(39,25)
  -> INLINE: (40,5) randomFill(real *&, real, real, size_t) (isz = 27) (sz = 38)
    -> EXTERN: (32,18) operator new[](std::size_t)
    -> EXTERN: (35,16) rand()
  -> INLINE: (41,5) randomFill(real *&, real, real, size_t) (isz = 27) (sz = 38)
    -> EXTERN: (32,18) operator new[](std::size_t)
    -> EXTERN: (35,16) rand()
  -> INLINE: (42,5) randomFill(real *&, real, real, size_t) (isz = 27) (sz = 38)
    -> EXTERN: (32,18) operator new[](std::size_t)
    -> EXTERN: (35,16) rand()
  -> INLINE: (43,5) randomFill(real *&, real, real, size_t) (isz = 27) (sz = 38)
    -> EXTERN: (32,18) operator new[](std::size_t)
    -> EXTERN: (35,16) rand()
  -> INLINE: (44,5) randomFill(real *&, real, real, size_t) (isz = 27) (sz = 38)
    -> EXTERN: (32,18) operator new[](std::size_t)
    -> EXTERN: (35,16) rand()
  -> INLINE: (45,5) randomFill(real *&, real, real, size_t) (isz = 27) (sz = 38)
    -> EXTERN: (32,18) operator new[](std::size_t)
    -> EXTERN: (35,16) rand()
  -> INLINE: (46,5) randomFill(real *&, real, real, size_t) (isz = 27) (sz = 38)
    -> EXTERN: (32,18) operator new[](std::size_t)
    -> EXTERN: (35,16) rand()


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at nbody-v1.cc(34,5) inlined into nbody-v1.cc(40,5)
   remark #15527: loop was not vectorized: function call to rand() cannot be vectorized   [ nbody-v1.cc(35,16) ]
LOOP END

LOOP BEGIN at nbody-v1.cc(34,5) inlined into nbody-v1.cc(41,5)
   remark #15527: loop was not vectorized: function call to rand() cannot be vectorized   [ nbody-v1.cc(35,16) ]
LOOP END

LOOP BEGIN at nbody-v1.cc(34,5) inlined into nbody-v1.cc(42,5)
   remark #15527: loop was not vectorized: function call to rand() cannot be vectorized   [ nbody-v1.cc(35,16) ]
LOOP END

LOOP BEGIN at nbody-v1.cc(34,5) inlined into nbody-v1.cc(43,5)
   remark #15527: loop was not vectorized: function call to rand() cannot be vectorized   [ nbody-v1.cc(35,16) ]
LOOP END

LOOP BEGIN at nbody-v1.cc(34,5) inlined into nbody-v1.cc(44,5)
   remark #15527: loop was not vectorized: function call to rand() cannot be vectorized   [ nbody-v1.cc(35,16) ]
LOOP END

LOOP BEGIN at nbody-v1.cc(34,5) inlined into nbody-v1.cc(45,5)
   remark #15527: loop was not vectorized: function call to rand() cannot be vectorized   [ nbody-v1.cc(35,16) ]
LOOP END

LOOP BEGIN at nbody-v1.cc(34,5) inlined into nbody-v1.cc(46,5)
   remark #15527: loop was not vectorized: function call to rand() cannot be vectorized   [ nbody-v1.cc(35,16) ]
LOOP END

    Report from: Code generation optimizations [cg]

nbody-v1.cc(39,25):remark #34051: REGISTER ALLOCATION : [_Z6bodiesm] nbody-v1.cc:39

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   63[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm31 k0-k7]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    9[ rax rdx rdi r12-r15 zmm0-zmm1]
        
    Routine temporaries
        Total         :      90
            Global    :      62
            Local     :      28
        Regenerable   :      13
        Spilled       :       4
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: cleanBodies()

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (cleanBodies()) [10/13=76.9%] nbody-v1.cc(49,20)
  -> EXTERN: (50,5) operator delete[](void *)
  -> EXTERN: (51,5) operator delete[](void *)
  -> EXTERN: (52,5) operator delete[](void *)
  -> EXTERN: (53,5) operator delete[](void *)
  -> EXTERN: (54,5) operator delete[](void *)
  -> EXTERN: (55,5) operator delete[](void *)
  -> EXTERN: (56,5) operator delete[](void *)


    Report from: Code generation optimizations [cg]

nbody-v1.cc(49,20):remark #34051: REGISTER ALLOCATION : [_Z11cleanBodiesv] nbody-v1.cc:49

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   63[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm31 k0-k7]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    1[ rdi]
        
    Routine temporaries
        Total         :      20
            Global    :      13
            Local     :       7
        Regenerable   :       0
        Spilled       :       0
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: std::operator|(std::_Ios_Iostate, std::_Ios_Iostate)

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (std::operator|(std::_Ios_Iostate, std::_Ios_Iostate)) /usr/include/c++/4.8.5/bits/ios_base.h(158,3)

===========================================================================

Begin optimization report for: __sti__$E()

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (__sti__$E()) [13/13=100.0%] <compiler generated>
  -> EXTERN: /usr/include/c++/4.8.5/iostream:(74,25) __cxa_atexit(void (*)(void *), void *, void *)
  -> EXTERN: /usr/include/c++/4.8.5/iostream:(74,25) std::ios_base::Init::Init(std::ios_base::Init *)


    Report from: Code generation optimizations [cg]

<compiler generated>:remark #34051: REGISTER ALLOCATION : [__sti__$E] (null):0

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   63[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm31 k0-k7]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    3[ rdx rsi rdi]
        
    Routine temporaries
        Total         :      13
            Global    :       7
            Local     :       6
        Regenerable   :       7
        Spilled       :       0
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

    Report from: Interprocedural optimizations [ipo]

INLINING FOOTNOTES:

<1> The routine declaration is annotated with "__attribute__((noinline))".  
    Remove this annotation to permit the compiler to inline this routine.

Intel(R) Advisor can now assist with vectorization and show optimization
  report messages with your source code.
See "https://software.intel.com/en-us/intel-advisor-xe" for details.

Intel(R) C++ Intel(R) 64 Compiler for applications running on Intel(R) 64, Version 18.0.1.163 Build 20171018

Compiler options:  -O3 -fopenmp -fp-model fast=2 -qopt-report=5 -g -xhost -DDOUBLE -o nbody-v1d

    Report from: Interprocedural optimizations [ipo]

  WHOLE PROGRAM (SAFE) [EITHER METHOD]: false
  WHOLE PROGRAM (SEEN) [TABLE METHOD]: false
  WHOLE PROGRAM (READ) [OBJECT READER METHOD]: false

INLINING OPTION VALUES:
  -inline-factor: 100
  -inline-min-size: 30
  -inline-max-size: 230
  -inline-max-total-size: 2000
  -inline-max-per-routine: 10000
  -inline-max-per-compile: 500000

In the inlining report below:
   "sz" refers to the "size" of the routine. The smaller a routine's size,
      the more likely it is to be inlined.
   "isz" refers to the "inlined size" of the routine. This is the amount
      the calling routine will grow if the called routine is inlined into it.
      The compiler generally limits the amount a routine can grow by having
      routines inlined into it.

*MIC* Begin optimization report for: main(int, char **)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (main(int, char **)) [1/5=20.0%] nbody-v1.cc(101,36)
  -> INLINE: (104,5) bodies(size_t) (isz = 229) (sz = 234)
    -> INLINE: (40,5) randomFill(real *&, real, real, size_t) (isz = 27) (sz = 38)
      -> EXTERN: (32,18) operator new[](unsigned long)
      -> EXTERN: (35,16) rand
    -> INLINE: (41,5) randomFill(real *&, real, real, size_t) (isz = 27) (sz = 38)
      -> EXTERN: (32,18) operator new[](unsigned long)
      -> EXTERN: (35,16) rand
    -> INLINE: (42,5) randomFill(real *&, real, real, size_t) (isz = 27) (sz = 38)
      -> EXTERN: (32,18) operator new[](unsigned long)
      -> EXTERN: (35,16) rand
    -> INLINE: (43,5) randomFill(real *&, real, real, size_t) (isz = 27) (sz = 38)
      -> EXTERN: (32,18) operator new[](unsigned long)
      -> EXTERN: (35,16) rand
    -> INLINE: (44,5) randomFill(real *&, real, real, size_t) (isz = 27) (sz = 38)
      -> EXTERN: (32,18) operator new[](unsigned long)
      -> EXTERN: (35,16) rand
    -> INLINE: (45,5) randomFill(real *&, real, real, size_t) (isz = 27) (sz = 38)
      -> EXTERN: (32,18) operator new[](unsigned long)
      -> EXTERN: (35,16) rand
    -> INLINE: (46,5) randomFill(real *&, real, real, size_t) (isz = 27) (sz = 38)
      -> EXTERN: (32,18) operator new[](unsigned long)
      -> EXTERN: (35,16) rand
  -> EXTERN: (106,10) std::basic_ostream<char, std::char_traits<char> >& std::operator<< <std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*)
  -> EXTERN: (107,10) std::basic_ostream<char, std::char_traits<char> >& std::operator<< <std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*)
  -> EXTERN: (107,49) std::ostream::operator<<(double)
  -> EXTERN: (107,57) std::basic_ostream<char, std::char_traits<char> >& std::operator<< <std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char)
  -> EXTERN: (107,64) std::ostream::operator<<(double)
  -> EXTERN: (107,72) std::basic_ostream<char, std::char_traits<char> >& std::operator<< <std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char)
  -> EXTERN: (107,79) std::ostream::operator<<(double)
  -> EXTERN: (107,87) std::basic_ostream<char, std::char_traits<char> >& std::operator<< <std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*)
  -> EXTERN: (108,10) std::basic_ostream<char, std::char_traits<char> >& std::operator<< <std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*)
  -> EXTERN: (108,48) std::ostream::operator<<(double)
  -> EXTERN: (108,58) std::basic_ostream<char, std::char_traits<char> >& std::operator<< <std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char)
  -> EXTERN: (108,65) std::ostream::operator<<(double)
  -> EXTERN: (108,75) std::basic_ostream<char, std::char_traits<char> >& std::operator<< <std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char)
  -> EXTERN: (108,82) std::ostream::operator<<(double)
  -> EXTERN: (108,92) std::basic_ostream<char, std::char_traits<char> >& std::operator<< <std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*)
  -> EXTERN: (110,17) omp_get_wtime
  -> (116,9) Newton(size_t, real) (isz = 234) (sz = 241)
     [[ Called routine is noinline  <1>]]
  -> EXTERN: (118,10) omp_get_wtime
  -> EXTERN: (120,10) std::basic_ostream<char, std::char_traits<char> >& std::operator<< <std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*)
  -> EXTERN: (121,10) std::basic_ostream<char, std::char_traits<char> >& std::operator<< <std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*)
  -> EXTERN: (121,49) std::ostream::operator<<(double)
  -> EXTERN: (121,57) std::basic_ostream<char, std::char_traits<char> >& std::operator<< <std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char)
  -> EXTERN: (121,64) std::ostream::operator<<(double)
  -> EXTERN: (121,72) std::basic_ostream<char, std::char_traits<char> >& std::operator<< <std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char)
  -> EXTERN: (121,79) std::ostream::operator<<(double)
  -> EXTERN: (121,87) std::basic_ostream<char, std::char_traits<char> >& std::operator<< <std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*)
  -> EXTERN: (122,10) std::basic_ostream<char, std::char_traits<char> >& std::operator<< <std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*)
  -> EXTERN: (122,48) std::ostream::operator<<(double)
  -> EXTERN: (122,58) std::basic_ostream<char, std::char_traits<char> >& std::operator<< <std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char)
  -> EXTERN: (122,65) std::ostream::operator<<(double)
  -> EXTERN: (122,75) std::basic_ostream<char, std::char_traits<char> >& std::operator<< <std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char)
  -> EXTERN: (122,82) std::ostream::operator<<(double)
  -> EXTERN: (122,92) std::basic_ostream<char, std::char_traits<char> >& std::operator<< <std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*)
  -> EXTERN: (123,10) std::basic_ostream<char, std::char_traits<char> >& std::operator<< <std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*)
  -> EXTERN: (123,25) std::ostream::operator<<(double)
  -> EXTERN: (123,31) std::basic_ostream<char, std::char_traits<char> >& std::operator<< <std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*)
  -> INLINE: (125,5) cleanBodies() (isz = 41) (sz = 44)
    -> EXTERN: (50,5) operator delete[](void*)
    -> EXTERN: (51,5) operator delete[](void*)
    -> EXTERN: (52,5) operator delete[](void*)
    -> EXTERN: (53,5) operator delete[](void*)
    -> EXTERN: (54,5) operator delete[](void*)
    -> EXTERN: (55,5) operator delete[](void*)
    -> EXTERN: (56,5) operator delete[](void*)


    Report from: Offload optimizations [offload]

OFFLOAD:main(113,5):  Outlined offload region
 Data received by target from host
       x, pointer to array reference expression with base
       y, pointer to array reference expression with base
       z, pointer to array reference expression with base
       vx, pointer to array reference expression with base
       vy, pointer to array reference expression with base
       vz, pointer to array reference expression with base
       m, pointer to array reference expression with base
 Data sent from target to host

OFFLOAD:main(117,5):  Outlined offload region
 Data received by target from host
 Data sent from target to host
       x, pointer to array reference expression with base
       y, pointer to array reference expression with base
       z, pointer to array reference expression with base


    Report from: Code generation optimizations [cg]

nbody-v1.cc(117,5):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (64, 0), and destination (alignment, offset): (64, 0)
nbody-v1.cc(117,5):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (64, 0), and destination (alignment, offset): (64, 0)
nbody-v1.cc(113,5):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (64, 0), and destination (alignment, offset): (64, 0)
nbody-v1.cc(113,5):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (64, 0), and destination (alignment, offset): (64, 0)
nbody-v1.cc(101,36):remark #34051: REGISTER ALLOCATION : [main] nbody-v1.cc:101

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   63[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm31 k0-k7]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   17[ rax rdx rcx rbx rsi rdi r13 zmm0-zmm1 zmm16-zmm23]
        
    Routine temporaries
        Total         :      72
            Global    :      20
            Local     :      52
        Regenerable   :      24
        Spilled       :       2
        
    Routine stack
        Variables     :    1132 bytes*
            Reads     :       6 [4.00e+00 ~ 3.8%]
            Writes    :       6 [4.00e+00 ~ 3.8%]
        Spills        :      16 bytes*
            Reads     :       2 [2.00e+00 ~ 1.9%]
            Writes    :       2 [2.00e+00 ~ 1.9%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

*MIC* Begin optimization report for: Newton(size_t, real)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (Newton(size_t, real)) [2/5=40.0%] nbody-v1.cc(59,34)


    Report from: OpenMP optimizations [openmp]

OpenMP Construct at nbody-v1.cc(63,5)
remark #16201: OpenMP DEFINED REGION WAS PARALLELIZED

    Report from: Offload optimizations [offload]

OFFLOAD:_Z6Newtonmd(62,5):  Outlined offload region
 Data received by target from host
       n, scalar size 8 bytes
       dtG, scalar size 8 bytes
       dt, scalar size 8 bytes
 Data sent from target to host
       x, pointer to array reference expression with base
       y, pointer to array reference expression with base
       z, pointer to array reference expression with base
       m, pointer to array reference expression with base
       vx, pointer to array reference expression with base
       vy, pointer to array reference expression with base
       vz, pointer to array reference expression with base


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at nbody-v1.cc(65,9)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at nbody-v1.cc(66,9)
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at nbody-v1.cc(69,13)
      <Peeled loop for vectorization>
         remark #15389: vectorization support: reference *x[j] has unaligned access   [ nbody-v1.cc(70,27) ]
         remark #15389: vectorization support: reference *y[j] has unaligned access   [ nbody-v1.cc(70,45) ]
         remark #15389: vectorization support: reference *z[j] has unaligned access   [ nbody-v1.cc(70,63) ]
         remark #15389: vectorization support: reference *m[j] has unaligned access   [ nbody-v1.cc(72,35) ]
         remark #15381: vectorization support: unaligned access used inside loop body
         remark #15305: vectorization support: vector length 8
         remark #15309: vectorization support: normalized vectorization overhead 0.350
         remark #15301: PEEL LOOP WAS VECTORIZED
      LOOP END

      LOOP BEGIN at nbody-v1.cc(69,13)
         remark #15389: vectorization support: reference *x[j] has unaligned access   [ nbody-v1.cc(70,27) ]
         remark #15389: vectorization support: reference *y[j] has unaligned access   [ nbody-v1.cc(70,45) ]
         remark #15389: vectorization support: reference *z[j] has unaligned access   [ nbody-v1.cc(70,63) ]
         remark #15389: vectorization support: reference *m[j] has unaligned access   [ nbody-v1.cc(72,35) ]
         remark #15381: vectorization support: unaligned access used inside loop body
         remark #15305: vectorization support: vector length 8
         remark #15309: vectorization support: normalized vectorization overhead 1.087
         remark #15301: OpenMP SIMD LOOP WAS VECTORIZED
         remark #15442: entire loop may be executed in remainder
         remark #15450: unmasked unaligned unit stride loads: 4 
         remark #15475: --- begin vector cost summary ---
         remark #15476: scalar cost: 100 
         remark #15477: vector cost: 13.000 
         remark #15478: estimated potential speedup: 7.020 
         remark #15488: --- end vector cost summary ---
      LOOP END

      LOOP BEGIN at nbody-v1.cc(69,13)
      <Remainder loop for vectorization>
         remark #15389: vectorization support: reference *x[j] has unaligned access   [ nbody-v1.cc(70,27) ]
         remark #15389: vectorization support: reference *y[j] has unaligned access   [ nbody-v1.cc(70,45) ]
         remark #15389: vectorization support: reference *z[j] has unaligned access   [ nbody-v1.cc(70,63) ]
         remark #15389: vectorization support: reference *m[j] has unaligned access   [ nbody-v1.cc(72,35) ]
         remark #15381: vectorization support: unaligned access used inside loop body
         remark #15305: vectorization support: vector length 8
         remark #15309: vectorization support: normalized vectorization overhead 0.350
         remark #15301: REMAINDER LOOP WAS VECTORIZED
      LOOP END

      LOOP BEGIN at nbody-v1.cc(78,13)
      <Peeled loop for vectorization>
         remark #15389: vectorization support: reference *x[j] has unaligned access   [ nbody-v1.cc(79,27) ]
         remark #15389: vectorization support: reference *y[j] has unaligned access   [ nbody-v1.cc(79,45) ]
         remark #15389: vectorization support: reference *z[j] has unaligned access   [ nbody-v1.cc(79,63) ]
         remark #15389: vectorization support: reference *m[j] has unaligned access   [ nbody-v1.cc(81,35) ]
         remark #15381: vectorization support: unaligned access used inside loop body
         remark #15305: vectorization support: vector length 8
         remark #15309: vectorization support: normalized vectorization overhead 0.350
         remark #15301: PEEL LOOP WAS VECTORIZED
      LOOP END

      LOOP BEGIN at nbody-v1.cc(78,13)
         remark #15389: vectorization support: reference *x[j] has unaligned access   [ nbody-v1.cc(79,27) ]
         remark #15389: vectorization support: reference *y[j] has unaligned access   [ nbody-v1.cc(79,45) ]
         remark #15389: vectorization support: reference *z[j] has unaligned access   [ nbody-v1.cc(79,63) ]
         remark #15389: vectorization support: reference *m[j] has unaligned access   [ nbody-v1.cc(81,35) ]
         remark #15381: vectorization support: unaligned access used inside loop body
         remark #15305: vectorization support: vector length 8
         remark #15309: vectorization support: normalized vectorization overhead 1.087
         remark #15301: OpenMP SIMD LOOP WAS VECTORIZED
         remark #15442: entire loop may be executed in remainder
         remark #15450: unmasked unaligned unit stride loads: 4 
         remark #15475: --- begin vector cost summary ---
         remark #15476: scalar cost: 100 
         remark #15477: vector cost: 13.000 
         remark #15478: estimated potential speedup: 7.020 
         remark #15488: --- end vector cost summary ---
      LOOP END

      LOOP BEGIN at nbody-v1.cc(78,13)
      <Remainder loop for vectorization>
         remark #15389: vectorization support: reference *x[j] has unaligned access   [ nbody-v1.cc(79,27) ]
         remark #15389: vectorization support: reference *y[j] has unaligned access   [ nbody-v1.cc(79,45) ]
         remark #15389: vectorization support: reference *z[j] has unaligned access   [ nbody-v1.cc(79,63) ]
         remark #15389: vectorization support: reference *m[j] has unaligned access   [ nbody-v1.cc(81,35) ]
         remark #15381: vectorization support: unaligned access used inside loop body
         remark #15305: vectorization support: vector length 8
         remark #15309: vectorization support: normalized vectorization overhead 0.350
         remark #15301: REMAINDER LOOP WAS VECTORIZED
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at nbody-v1.cc(90,9)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at nbody-v1.cc(90,9)
   <Peeled loop for vectorization>
      remark #15389: vectorization support: reference *(*x+i*8) has unaligned access   [ nbody-v1.cc(92,13) ]
      remark #15389: vectorization support: reference *(*x+i*8) has unaligned access   [ nbody-v1.cc(92,13) ]
      remark #15389: vectorization support: reference *vx[i] has unaligned access   [ nbody-v1.cc(92,21) ]
      remark #15389: vectorization support: reference *(*y+i*8) has unaligned access   [ nbody-v1.cc(93,13) ]
      remark #15389: vectorization support: reference *(*y+i*8) has unaligned access   [ nbody-v1.cc(93,13) ]
      remark #15389: vectorization support: reference *vy[i] has unaligned access   [ nbody-v1.cc(93,21) ]
      remark #15389: vectorization support: reference *(*z+i*8) has unaligned access   [ nbody-v1.cc(94,13) ]
      remark #15389: vectorization support: reference *(*z+i*8) has unaligned access   [ nbody-v1.cc(94,13) ]
      remark #15389: vectorization support: reference *vz[i] has unaligned access   [ nbody-v1.cc(94,21) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15335: peel loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
      remark #15305: vectorization support: vector length 2
      remark #15309: vectorization support: normalized vectorization overhead 0.255
      remark #25015: Estimate of max trip count of loop=7
   LOOP END

   LOOP BEGIN at nbody-v1.cc(90,9)
      remark #15389: vectorization support: reference *(*x+i*8) has unaligned access   [ nbody-v1.cc(92,13) ]
      remark #15389: vectorization support: reference *(*x+i*8) has unaligned access   [ nbody-v1.cc(92,13) ]
      remark #15389: vectorization support: reference *vx[i] has unaligned access   [ nbody-v1.cc(92,21) ]
      remark #15389: vectorization support: reference *(*y+i*8) has unaligned access   [ nbody-v1.cc(93,13) ]
      remark #15389: vectorization support: reference *(*y+i*8) has unaligned access   [ nbody-v1.cc(93,13) ]
      remark #15389: vectorization support: reference *vy[i] has unaligned access   [ nbody-v1.cc(93,21) ]
      remark #15389: vectorization support: reference *(*z+i*8) has unaligned access   [ nbody-v1.cc(94,13) ]
      remark #15389: vectorization support: reference *(*z+i*8) has unaligned access   [ nbody-v1.cc(94,13) ]
      remark #15389: vectorization support: reference *vz[i] has unaligned access   [ nbody-v1.cc(94,21) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 8
      remark #15309: vectorization support: normalized vectorization overhead 1.132
      remark #15301: OpenMP SIMD LOOP WAS VECTORIZED
      remark #15442: entire loop may be executed in remainder
      remark #15450: unmasked unaligned unit stride loads: 6 
      remark #15451: unmasked unaligned unit stride stores: 3 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 35 
      remark #15477: vector cost: 4.750 
      remark #15478: estimated potential speedup: 6.710 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at nbody-v1.cc(90,9)
   <Remainder loop for vectorization>
      remark #15389: vectorization support: reference *(*x+i*8) has unaligned access   [ nbody-v1.cc(92,13) ]
      remark #15389: vectorization support: reference *(*x+i*8) has unaligned access   [ nbody-v1.cc(92,13) ]
      remark #15389: vectorization support: reference *vx[i] has unaligned access   [ nbody-v1.cc(92,21) ]
      remark #15389: vectorization support: reference *(*y+i*8) has unaligned access   [ nbody-v1.cc(93,13) ]
      remark #15389: vectorization support: reference *(*y+i*8) has unaligned access   [ nbody-v1.cc(93,13) ]
      remark #15389: vectorization support: reference *vy[i] has unaligned access   [ nbody-v1.cc(93,21) ]
      remark #15389: vectorization support: reference *(*z+i*8) has unaligned access   [ nbody-v1.cc(94,13) ]
      remark #15389: vectorization support: reference *(*z+i*8) has unaligned access   [ nbody-v1.cc(94,13) ]
      remark #15389: vectorization support: reference *vz[i] has unaligned access   [ nbody-v1.cc(94,21) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 8
      remark #15309: vectorization support: normalized vectorization overhead 0.268
      remark #15301: REMAINDER LOOP WAS VECTORIZED
   LOOP END
LOOP END

    Report from: Code generation optimizations [cg]

nbody-v1.cc(62,5):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (64, 0), and destination (alignment, offset): (64, 0)
nbody-v1.cc(62,5):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (64, 0), and destination (alignment, offset): (64, 0)
nbody-v1.cc(59,34):remark #34051: REGISTER ALLOCATION : [_Z6Newtonmd] nbody-v1.cc:59

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   63[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm31 k0-k7]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   47[ rax rdx rcx rbx rsi rdi r8-r15 zmm0-zmm31 k1]
        
    Routine temporaries
        Total         :     740
            Global    :     157
            Local     :     583
        Regenerable   :     174
        Spilled       :      28
        
    Routine stack
        Variables     :    1300 bytes*
            Reads     :      29 [3.68e+01 ~ 0.6%]
            Writes    :      46 [7.80e+01 ~ 1.3%]
        Spills        :     320 bytes*
            Reads     :      84 [1.36e+02 ~ 2.3%]
            Writes    :      55 [5.35e+01 ~ 0.9%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

*MIC* Begin optimization report for: randomFill(real *&, real, real, size_t)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (randomFill(real *&, real, real, size_t)) [3/5=60.0%] nbody-v1.cc(31,59)
  -> EXTERN: (32,18) operator new[](unsigned long)
  -> EXTERN: (35,16) rand


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at nbody-v1.cc(34,5)
   remark #15527: loop was not vectorized: function call to rand cannot be vectorized   [ nbody-v1.cc(35,16) ]
LOOP END

    Report from: Code generation optimizations [cg]

nbody-v1.cc(31,59):remark #34051: REGISTER ALLOCATION : [_Z10randomFillRPdddm] nbody-v1.cc:31

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   63[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm31 k0-k7]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   11[ rax rsi rdi r12-r14 zmm0-zmm4]
        
    Routine temporaries
        Total         :      31
            Global    :      16
            Local     :      15
        Regenerable   :       2
        Spilled       :       6
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :      48 bytes*
            Reads     :       7 [1.49e+01 ~ 14.8%]
            Writes    :       6 [5.80e+00 ~ 5.8%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

*MIC* Begin optimization report for: bodies(size_t)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (bodies(size_t)) [4/5=80.0%] nbody-v1.cc(39,25)
  -> INLINE: (40,5) randomFill(real *&, real, real, size_t) (isz = 27) (sz = 38)
    -> EXTERN: (32,18) operator new[](unsigned long)
    -> EXTERN: (35,16) rand
  -> INLINE: (41,5) randomFill(real *&, real, real, size_t) (isz = 27) (sz = 38)
    -> EXTERN: (32,18) operator new[](unsigned long)
    -> EXTERN: (35,16) rand
  -> INLINE: (42,5) randomFill(real *&, real, real, size_t) (isz = 27) (sz = 38)
    -> EXTERN: (32,18) operator new[](unsigned long)
    -> EXTERN: (35,16) rand
  -> INLINE: (43,5) randomFill(real *&, real, real, size_t) (isz = 27) (sz = 38)
    -> EXTERN: (32,18) operator new[](unsigned long)
    -> EXTERN: (35,16) rand
  -> INLINE: (44,5) randomFill(real *&, real, real, size_t) (isz = 27) (sz = 38)
    -> EXTERN: (32,18) operator new[](unsigned long)
    -> EXTERN: (35,16) rand
  -> INLINE: (45,5) randomFill(real *&, real, real, size_t) (isz = 27) (sz = 38)
    -> EXTERN: (32,18) operator new[](unsigned long)
    -> EXTERN: (35,16) rand
  -> INLINE: (46,5) randomFill(real *&, real, real, size_t) (isz = 27) (sz = 38)
    -> EXTERN: (32,18) operator new[](unsigned long)
    -> EXTERN: (35,16) rand


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at nbody-v1.cc(34,5) inlined into nbody-v1.cc(40,5)
   remark #15527: loop was not vectorized: function call to rand cannot be vectorized   [ nbody-v1.cc(35,16) ]
LOOP END

LOOP BEGIN at nbody-v1.cc(34,5) inlined into nbody-v1.cc(41,5)
   remark #15527: loop was not vectorized: function call to rand cannot be vectorized   [ nbody-v1.cc(35,16) ]
LOOP END

LOOP BEGIN at nbody-v1.cc(34,5) inlined into nbody-v1.cc(42,5)
   remark #15527: loop was not vectorized: function call to rand cannot be vectorized   [ nbody-v1.cc(35,16) ]
LOOP END

LOOP BEGIN at nbody-v1.cc(34,5) inlined into nbody-v1.cc(43,5)
   remark #15527: loop was not vectorized: function call to rand cannot be vectorized   [ nbody-v1.cc(35,16) ]
LOOP END

LOOP BEGIN at nbody-v1.cc(34,5) inlined into nbody-v1.cc(44,5)
   remark #15527: loop was not vectorized: function call to rand cannot be vectorized   [ nbody-v1.cc(35,16) ]
LOOP END

LOOP BEGIN at nbody-v1.cc(34,5) inlined into nbody-v1.cc(45,5)
   remark #15527: loop was not vectorized: function call to rand cannot be vectorized   [ nbody-v1.cc(35,16) ]
LOOP END

LOOP BEGIN at nbody-v1.cc(34,5) inlined into nbody-v1.cc(46,5)
   remark #15527: loop was not vectorized: function call to rand cannot be vectorized   [ nbody-v1.cc(35,16) ]
LOOP END

    Report from: Code generation optimizations [cg]

nbody-v1.cc(39,25):remark #34051: REGISTER ALLOCATION : [_Z6bodiesm] nbody-v1.cc:39

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   63[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm31 k0-k7]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    9[ rax rdx rdi r12-r15 zmm0-zmm1]
        
    Routine temporaries
        Total         :      90
            Global    :      62
            Local     :      28
        Regenerable   :      13
        Spilled       :       4
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :      32 bytes*
            Reads     :      15 [1.37e+01 ~ 2.9%]
            Writes    :      15 [1.37e+01 ~ 2.9%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

*MIC* Begin optimization report for: cleanBodies()

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (cleanBodies()) [5/5=100.0%] nbody-v1.cc(49,20)
  -> EXTERN: (50,5) operator delete[](void*)
  -> EXTERN: (51,5) operator delete[](void*)
  -> EXTERN: (52,5) operator delete[](void*)
  -> EXTERN: (53,5) operator delete[](void*)
  -> EXTERN: (54,5) operator delete[](void*)
  -> EXTERN: (55,5) operator delete[](void*)
  -> EXTERN: (56,5) operator delete[](void*)


    Report from: Code generation optimizations [cg]

nbody-v1.cc(49,20):remark #34051: REGISTER ALLOCATION : [_Z11cleanBodiesv] nbody-v1.cc:49

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   63[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm31 k0-k7]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    1[ rdi]
        
    Routine temporaries
        Total         :      20
            Global    :      13
            Local     :       7
        Regenerable   :       0
        Spilled       :       0
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

    Report from: Interprocedural optimizations [ipo]

INLINING FOOTNOTES:

<1> The routine declaration is annotated with "__attribute__((noinline))".  
    Remove this annotation to permit the compiler to inline this routine.

