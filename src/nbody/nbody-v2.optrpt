Intel(R) Advisor can now assist with vectorization and show optimization
  report messages with your source code.
See "https://software.intel.com/en-us/intel-advisor-xe" for details.

Intel(R) C++ Intel(R) 64 Compiler for applications running on Intel(R) 64, Version 18.0.1.163 Build 20171018

Compiler options: -O3 -fopenmp -fp-model fast=2 -qopt-report=5 -g -xhost -DDOUBLE -o nbody-v2d

    Report from: Interprocedural optimizations [ipo]

  WHOLE PROGRAM (SAFE) [EITHER METHOD]: false
  WHOLE PROGRAM (SEEN) [TABLE METHOD]: false
  WHOLE PROGRAM (READ) [OBJECT READER METHOD]: false

INLINING OPTION VALUES:
  -inline-factor: 100
  -inline-min-size: 30
  -inline-max-size: 230
  -inline-max-total-size: 2000
  -inline-max-per-routine: 10000
  -inline-max-per-compile: 500000

In the inlining report below:
   "sz" refers to the "size" of the routine. The smaller a routine's size,
      the more likely it is to be inlined.
   "isz" refers to the "inlined size" of the routine. This is the amount
      the calling routine will grow if the called routine is inlined into it.
      The compiler generally limits the amount a routine can grow by having
      routines inlined into it.

Begin optimization report for: main(int, char **)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (main(int, char **)) [1/13=7.7%] nbody-v2.cc(103,36)
  -> INLINE: (106,5) bodies(size_t) (isz = 229) (sz = 234)
    -> INLINE: (40,5) randomFill(real *&, real, real, size_t) (isz = 27) (sz = 38)
      -> EXTERN: (32,18) operator new[](std::size_t)
      -> EXTERN: (35,16) rand()
    -> INLINE: (41,5) randomFill(real *&, real, real, size_t) (isz = 27) (sz = 38)
      -> EXTERN: (32,18) operator new[](std::size_t)
      -> EXTERN: (35,16) rand()
    -> INLINE: (42,5) randomFill(real *&, real, real, size_t) (isz = 27) (sz = 38)
      -> EXTERN: (32,18) operator new[](std::size_t)
      -> EXTERN: (35,16) rand()
    -> INLINE: (43,5) randomFill(real *&, real, real, size_t) (isz = 27) (sz = 38)
      -> EXTERN: (32,18) operator new[](std::size_t)
      -> EXTERN: (35,16) rand()
    -> INLINE: (44,5) randomFill(real *&, real, real, size_t) (isz = 27) (sz = 38)
      -> EXTERN: (32,18) operator new[](std::size_t)
      -> EXTERN: (35,16) rand()
    -> INLINE: (45,5) randomFill(real *&, real, real, size_t) (isz = 27) (sz = 38)
      -> EXTERN: (32,18) operator new[](std::size_t)
      -> EXTERN: (35,16) rand()
    -> INLINE: (46,5) randomFill(real *&, real, real, size_t) (isz = 27) (sz = 38)
      -> EXTERN: (32,18) operator new[](std::size_t)
      -> EXTERN: (35,16) rand()
  -> EXTERN: (113,5) omp_set_nested(int)
  -> (121,10) std::operator<<<std::char_traits<char>>(std::basic_ostream<char, std::char_traits<char>> &, const char *) (isz = 15) (sz = 24)
     [[ Called routine is noinline  <1>]]
  -> (122,10) std::operator<<<std::char_traits<char>>(std::basic_ostream<char, std::char_traits<char>> &, const char *) (isz = 15) (sz = 24)
     [[ Called routine is noinline  <1>]]
  -> (122,49) std::basic_ostream<char, std::char_traits<char>>::operator<<(std::basic_ostream<char, std::char_traits<char>> *, double) (isz = 1) (sz = 10)
     [[ Called routine is noinline  <1>]]
  -> (122,57) std::operator<<<std::char_traits<char>>(std::basic_ostream<char, std::char_traits<char>> &, char) (isz = 3) (sz = 12)
     [[ Called routine is noinline  <1>]]
  -> (122,64) std::basic_ostream<char, std::char_traits<char>>::operator<<(std::basic_ostream<char, std::char_traits<char>> *, double) (isz = 1) (sz = 10)
     [[ Called routine is noinline  <1>]]
  -> (122,72) std::operator<<<std::char_traits<char>>(std::basic_ostream<char, std::char_traits<char>> &, char) (isz = 3) (sz = 12)
     [[ Called routine is noinline  <1>]]
  -> (122,79) std::basic_ostream<char, std::char_traits<char>>::operator<<(std::basic_ostream<char, std::char_traits<char>> *, double) (isz = 1) (sz = 10)
     [[ Called routine is noinline  <1>]]
  -> (122,87) std::operator<<<std::char_traits<char>>(std::basic_ostream<char, std::char_traits<char>> &, const char *) (isz = 15) (sz = 24)
     [[ Called routine is noinline  <1>]]
  -> (123,10) std::operator<<<std::char_traits<char>>(std::basic_ostream<char, std::char_traits<char>> &, const char *) (isz = 15) (sz = 24)
     [[ Called routine is noinline  <1>]]
  -> (123,48) std::basic_ostream<char, std::char_traits<char>>::operator<<(std::basic_ostream<char, std::char_traits<char>> *, double) (isz = 1) (sz = 10)
     [[ Called routine is noinline  <1>]]
  -> (123,58) std::operator<<<std::char_traits<char>>(std::basic_ostream<char, std::char_traits<char>> &, char) (isz = 3) (sz = 12)
     [[ Called routine is noinline  <1>]]
  -> (123,65) std::basic_ostream<char, std::char_traits<char>>::operator<<(std::basic_ostream<char, std::char_traits<char>> *, double) (isz = 1) (sz = 10)
     [[ Called routine is noinline  <1>]]
  -> (123,75) std::operator<<<std::char_traits<char>>(std::basic_ostream<char, std::char_traits<char>> &, char) (isz = 3) (sz = 12)
     [[ Called routine is noinline  <1>]]
  -> (123,82) std::basic_ostream<char, std::char_traits<char>>::operator<<(std::basic_ostream<char, std::char_traits<char>> *, double) (isz = 1) (sz = 10)
     [[ Called routine is noinline  <1>]]
  -> (123,92) std::operator<<<std::char_traits<char>>(std::basic_ostream<char, std::char_traits<char>> &, const char *) (isz = 15) (sz = 24)
     [[ Called routine is noinline  <1>]]
  -> EXTERN: (125,17) omp_get_wtime()
  -> EXTERN: (137,29) omp_get_thread_num()
  -> EXTERN: (144,29) omp_get_wtime()
  -> (146,17) Newton(size_t, size_t, size_t, real) (isz = 235) (sz = 246)
     [[ Called routine is noinline  <1>]]
  -> EXTERN: (147,28) omp_get_wtime()
  -> EXTERN: (168,10) omp_get_wtime()
  -> (170,10) std::operator<<<std::char_traits<char>>(std::basic_ostream<char, std::char_traits<char>> &, const char *) (isz = 15) (sz = 24)
     [[ Called routine is noinline  <1>]]
  -> (171,10) std::operator<<<std::char_traits<char>>(std::basic_ostream<char, std::char_traits<char>> &, const char *) (isz = 15) (sz = 24)
     [[ Called routine is noinline  <1>]]
  -> (171,49) std::basic_ostream<char, std::char_traits<char>>::operator<<(std::basic_ostream<char, std::char_traits<char>> *, double) (isz = 1) (sz = 10)
     [[ Called routine is noinline  <1>]]
  -> (171,57) std::operator<<<std::char_traits<char>>(std::basic_ostream<char, std::char_traits<char>> &, char) (isz = 3) (sz = 12)
     [[ Called routine is noinline  <1>]]
  -> (171,64) std::basic_ostream<char, std::char_traits<char>>::operator<<(std::basic_ostream<char, std::char_traits<char>> *, double) (isz = 1) (sz = 10)
     [[ Called routine is noinline  <1>]]
  -> (171,72) std::operator<<<std::char_traits<char>>(std::basic_ostream<char, std::char_traits<char>> &, char) (isz = 3) (sz = 12)
     [[ Called routine is noinline  <1>]]
  -> (171,79) std::basic_ostream<char, std::char_traits<char>>::operator<<(std::basic_ostream<char, std::char_traits<char>> *, double) (isz = 1) (sz = 10)
     [[ Called routine is noinline  <1>]]
  -> (171,87) std::operator<<<std::char_traits<char>>(std::basic_ostream<char, std::char_traits<char>> &, const char *) (isz = 15) (sz = 24)
     [[ Called routine is noinline  <1>]]
  -> (172,10) std::operator<<<std::char_traits<char>>(std::basic_ostream<char, std::char_traits<char>> &, const char *) (isz = 15) (sz = 24)
     [[ Called routine is noinline  <1>]]
  -> (172,48) std::basic_ostream<char, std::char_traits<char>>::operator<<(std::basic_ostream<char, std::char_traits<char>> *, double) (isz = 1) (sz = 10)
     [[ Called routine is noinline  <1>]]
  -> (172,58) std::operator<<<std::char_traits<char>>(std::basic_ostream<char, std::char_traits<char>> &, char) (isz = 3) (sz = 12)
     [[ Called routine is noinline  <1>]]
  -> (172,65) std::basic_ostream<char, std::char_traits<char>>::operator<<(std::basic_ostream<char, std::char_traits<char>> *, double) (isz = 1) (sz = 10)
     [[ Called routine is noinline  <1>]]
  -> (172,75) std::operator<<<std::char_traits<char>>(std::basic_ostream<char, std::char_traits<char>> &, char) (isz = 3) (sz = 12)
     [[ Called routine is noinline  <1>]]
  -> (172,82) std::basic_ostream<char, std::char_traits<char>>::operator<<(std::basic_ostream<char, std::char_traits<char>> *, double) (isz = 1) (sz = 10)
     [[ Called routine is noinline  <1>]]
  -> (172,92) std::operator<<<std::char_traits<char>>(std::basic_ostream<char, std::char_traits<char>> &, const char *) (isz = 15) (sz = 24)
     [[ Called routine is noinline  <1>]]
  -> (173,10) std::operator<<<std::char_traits<char>>(std::basic_ostream<char, std::char_traits<char>> &, const char *) (isz = 15) (sz = 24)
     [[ Called routine is noinline  <1>]]
  -> (173,25) std::basic_ostream<char, std::char_traits<char>>::operator<<(std::basic_ostream<char, std::char_traits<char>> *, double) (isz = 1) (sz = 10)
     [[ Called routine is noinline  <1>]]
  -> (173,31) std::operator<<<std::char_traits<char>>(std::basic_ostream<char, std::char_traits<char>> &, const char *) (isz = 15) (sz = 24)
     [[ Called routine is noinline  <1>]]
  -> INLINE: (175,5) cleanBodies() (isz = 41) (sz = 44)
    -> EXTERN: (50,5) operator delete[](void *)
    -> EXTERN: (51,5) operator delete[](void *)
    -> EXTERN: (52,5) operator delete[](void *)
    -> EXTERN: (53,5) operator delete[](void *)
    -> EXTERN: (54,5) operator delete[](void *)
    -> EXTERN: (55,5) operator delete[](void *)
    -> EXTERN: (56,5) operator delete[](void *)


    Report from: OpenMP optimizations [openmp]

OpenMP Construct at nbody-v2.cc(151,17)
remark #16207: OpenMP multithreaded code generation for BARRIER was successful

    Report from: Offload optimizations [offload]

OFFLOAD:main(129,5):  Offload to target MIC 1
 Evaluate length/align/alloc_if/free_if/alloc/into expressions
   Modifier expression assigned to __offload_alloc_if.85
   Modifier expression assigned to __offload_free_if.86
   Modifier expression assigned to __offload_alloc_if.88
   Modifier expression assigned to __offload_free_if.89
   Modifier expression assigned to __offload_alloc_if.91
   Modifier expression assigned to __offload_free_if.92
   Modifier expression assigned to __offload_alloc_if.94
   Modifier expression assigned to __offload_free_if.95
   Modifier expression assigned to __offload_alloc_if.97
   Modifier expression assigned to __offload_free_if.98
   Modifier expression assigned to __offload_alloc_if.100
   Modifier expression assigned to __offload_free_if.101
   Modifier expression assigned to __offload_alloc_if.103
   Modifier expression assigned to __offload_free_if.104
 Data sent from host to target
       x, pointer to array reference expression with base
       y, pointer to array reference expression with base
       z, pointer to array reference expression with base
       vx, pointer to array reference expression with base
       vy, pointer to array reference expression with base
       vz, pointer to array reference expression with base
       m, pointer to array reference expression with base
 Data received by host from target

OFFLOAD:main(157,21):  Offload to target MIC 1
 Evaluate length/align/alloc_if/free_if/alloc/into expressions
   Modifier expression assigned to __offload_alloc_if.114
   Modifier expression assigned to __offload_free_if.115
   Modifier expression assigned to __offload_alloc_if.117
   Modifier expression assigned to __offload_free_if.118
   Modifier expression assigned to __offload_alloc_if.120
   Modifier expression assigned to __offload_free_if.121
   Modifier expression assigned to __offload_alloc_if.123
   Modifier expression assigned to __offload_free_if.124
   Modifier expression assigned to __offload_alloc_if.126
   Modifier expression assigned to __offload_free_if.127
   Modifier expression assigned to __offload_alloc_if.129
   Modifier expression assigned to __offload_free_if.130
 Data sent from host to target
       __$Uf_V$a3, scalar size 8 bytes
       __$U10_V$a4, scalar size 8 bytes
       __$U11_V$a5, scalar size 8 bytes
       __$U12_V$a6, scalar size 8 bytes
       __$U13_V$a7, scalar size 8 bytes
       __$U14_V$a8, scalar size 8 bytes
 Data received by host from target
       x, pointer to array reference expression with base
       y, pointer to array reference expression with base
       z, pointer to array reference expression with base
       vx, pointer to array reference expression with base
       vy, pointer to array reference expression with base
       vz, pointer to array reference expression with base

OFFLOAD:main(160,21):  Offload to target MIC 1
 Evaluate length/align/alloc_if/free_if/alloc/into expressions
   Modifier expression assigned to __offload_alloc_if.132
   Modifier expression assigned to __offload_free_if.133
   Modifier expression assigned to __offload_alloc_if.135
   Modifier expression assigned to __offload_free_if.136
   Modifier expression assigned to __offload_alloc_if.138
   Modifier expression assigned to __offload_free_if.139
   Modifier expression assigned to __offload_alloc_if.141
   Modifier expression assigned to __offload_free_if.142
   Modifier expression assigned to __offload_alloc_if.144
   Modifier expression assigned to __offload_free_if.145
   Modifier expression assigned to __offload_alloc_if.147
   Modifier expression assigned to __offload_free_if.148
 Data sent from host to target
       __$U15_V$a9, scalar size 8 bytes
       __$U16_V$aa, scalar size 8 bytes
       __$U17_V$ab, scalar size 8 bytes
       __$U18_V$ac, scalar size 8 bytes
       __$U19_V$ad, scalar size 8 bytes
       __$U1a_V$ae, scalar size 8 bytes
       __$U1b_V$af, scalar size 8 bytes
       __$U1c_V$b0, scalar size 8 bytes
       __$U1d_V$b1, scalar size 8 bytes
       __$U1e_V$b2, scalar size 8 bytes
       __$U1f_V$b3, scalar size 8 bytes
       __$U20_V$b4, scalar size 8 bytes
       x, pointer to array reference expression with base
       y, pointer to array reference expression with base
       z, pointer to array reference expression with base
       vx, pointer to array reference expression with base
       vy, pointer to array reference expression with base
       vz, pointer to array reference expression with base
 Data received by host from target

OpenMP Construct at nbody-v2.cc(154,17)
remark #16204: OpenMP multithreaded code generation for SINGLE was successful

    Report from: OpenMP optimizations [openmp]

OpenMP Construct at nbody-v2.cc(133,9)
remark #16201: OpenMP DEFINED REGION WAS PARALLELIZED

    Report from: Offload optimizations [offload]

OFFLOAD:main(167,5):  Offload to target MIC 1
 Evaluate length/align/alloc_if/free_if/alloc/into expressions
   Modifier expression assigned to __offload_alloc_if.150
   Modifier expression assigned to __offload_free_if.151
   Modifier expression assigned to __offload_alloc_if.153
   Modifier expression assigned to __offload_free_if.154
   Modifier expression assigned to __offload_alloc_if.156
   Modifier expression assigned to __offload_free_if.157
   Modifier expression assigned to __offload_alloc_if.159
   Modifier expression assigned to __offload_free_if.160
   Modifier expression assigned to __offload_alloc_if.162
   Modifier expression assigned to __offload_free_if.163
   Modifier expression assigned to __offload_alloc_if.165
   Modifier expression assigned to __offload_free_if.166
   Modifier expression assigned to __offload_alloc_if.168
   Modifier expression assigned to __offload_free_if.169
 Data sent from host to target
 Data received by host from target


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at nbody-v2.cc(34,5) inlined into nbody-v2.cc(106,5)
   remark #15527: loop was not vectorized: function call to rand() cannot be vectorized   [ nbody-v2.cc(35,16) ]
LOOP END

LOOP BEGIN at nbody-v2.cc(34,5) inlined into nbody-v2.cc(106,5)
   remark #15527: loop was not vectorized: function call to rand() cannot be vectorized   [ nbody-v2.cc(35,16) ]
LOOP END

LOOP BEGIN at nbody-v2.cc(34,5) inlined into nbody-v2.cc(106,5)
   remark #15527: loop was not vectorized: function call to rand() cannot be vectorized   [ nbody-v2.cc(35,16) ]
LOOP END

LOOP BEGIN at nbody-v2.cc(34,5) inlined into nbody-v2.cc(106,5)
   remark #15527: loop was not vectorized: function call to rand() cannot be vectorized   [ nbody-v2.cc(35,16) ]
LOOP END

LOOP BEGIN at nbody-v2.cc(34,5) inlined into nbody-v2.cc(106,5)
   remark #15527: loop was not vectorized: function call to rand() cannot be vectorized   [ nbody-v2.cc(35,16) ]
LOOP END

LOOP BEGIN at nbody-v2.cc(34,5) inlined into nbody-v2.cc(106,5)
   remark #15527: loop was not vectorized: function call to rand() cannot be vectorized   [ nbody-v2.cc(35,16) ]
LOOP END

LOOP BEGIN at nbody-v2.cc(34,5) inlined into nbody-v2.cc(106,5)
   remark #15527: loop was not vectorized: function call to rand() cannot be vectorized   [ nbody-v2.cc(35,16) ]
LOOP END

LOOP BEGIN at nbody-v2.cc(138,13)
   remark #15382: vectorization support: call to function omp_get_wtime() cannot be vectorized   [ nbody-v2.cc(144,29) ]
   remark #15382: vectorization support: call to function Newton(size_t, size_t, size_t, real) cannot be vectorized   [ nbody-v2.cc(146,17) ]
   remark #15382: vectorization support: call to function omp_get_wtime() cannot be vectorized   [ nbody-v2.cc(147,28) ]
   remark #15382: vectorization support: call to function __kmpc_barrier cannot be vectorized   [ nbody-v2.cc(151,17) ]
   remark #15382: vectorization support: call to function __kmpc_single cannot be vectorized   [ nbody-v2.cc(154,17) ]
   remark #15382: vectorization support: call to function __offload_target_acquire1 cannot be vectorized   [ nbody-v2.cc(157,21) ]
   remark #15382: vectorization support: call to function __offload_offload2 cannot be vectorized   [ nbody-v2.cc(157,21) ]
   remark #15382: vectorization support: call to function __offload_target_acquire1 cannot be vectorized   [ nbody-v2.cc(160,21) ]
   remark #15382: vectorization support: call to function __offload_offload2 cannot be vectorized   [ nbody-v2.cc(160,21) ]
   remark #15382: vectorization support: call to function __kmpc_end_single cannot be vectorized   [ nbody-v2.cc(154,17) ]
   remark #15382: vectorization support: call to function __kmpc_barrier cannot be vectorized   [ nbody-v2.cc(154,17) ]
   remark #15344: loop was not vectorized: vector dependence prevents vectorization
   remark #15346: vector dependence: assumed ANTI dependence between *ratio (140:34) and at (154:17)
LOOP END

    Report from: Code generation optimizations [cg]

nbody-v2.cc(129,5):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (32, 0)
nbody-v2.cc(129,5):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (32, 0)
nbody-v2.cc(129,5):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (32, 0)
nbody-v2.cc(129,5):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (32, 0)
nbody-v2.cc(129,5):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (32, 0)
nbody-v2.cc(129,5):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (32, 0)
nbody-v2.cc(129,5):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (32, 0)
nbody-v2.cc(129,5):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (32, 0)
nbody-v2.cc(129,5):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (32, 0)
nbody-v2.cc(129,5):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (32, 0)
nbody-v2.cc(129,5):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (32, 0)
nbody-v2.cc(129,5):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (32, 0)
nbody-v2.cc(129,5):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (32, 0)
nbody-v2.cc(129,5):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (32, 0)
nbody-v2.cc(129,5):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (32, 0)
nbody-v2.cc(129,5):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (32, 0)
nbody-v2.cc(167,5):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (32, 0)
nbody-v2.cc(167,5):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (32, 0)
nbody-v2.cc(167,5):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (32, 0)
nbody-v2.cc(167,5):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (32, 0)
nbody-v2.cc(167,5):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (32, 0)
nbody-v2.cc(167,5):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (32, 0)
nbody-v2.cc(167,5):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (32, 0)
nbody-v2.cc(167,5):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (32, 0)
nbody-v2.cc(167,5):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (32, 0)
nbody-v2.cc(167,5):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (32, 0)
nbody-v2.cc(167,5):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (32, 0)
nbody-v2.cc(167,5):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (32, 0)
nbody-v2.cc(167,5):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (32, 0)
nbody-v2.cc(167,5):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (32, 0)
nbody-v2.cc(167,5):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (32, 0)
nbody-v2.cc(167,5):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (32, 0)
nbody-v2.cc(157,21):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (32, 0)
nbody-v2.cc(157,21):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (32, 0)
nbody-v2.cc(157,21):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (32, 0)
nbody-v2.cc(157,21):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (32, 0)
nbody-v2.cc(157,21):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (32, 0)
nbody-v2.cc(157,21):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (32, 0)
nbody-v2.cc(157,21):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (32, 0)
nbody-v2.cc(157,21):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (32, 0)
nbody-v2.cc(157,21):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (32, 0)
nbody-v2.cc(157,21):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (32, 0)
nbody-v2.cc(157,21):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (32, 0)
nbody-v2.cc(157,21):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (32, 0)
nbody-v2.cc(157,21):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (32, 0)
nbody-v2.cc(157,21):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (32, 0)
nbody-v2.cc(160,21):remark #34026: call to memcpy implemented as a call to optimized library version
nbody-v2.cc(160,21):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (32, 0)
nbody-v2.cc(160,21):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (32, 0)
nbody-v2.cc(160,21):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (32, 0)
nbody-v2.cc(160,21):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (32, 0)
nbody-v2.cc(160,21):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (32, 0)
nbody-v2.cc(160,21):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (32, 0)
nbody-v2.cc(160,21):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (32, 0)
nbody-v2.cc(160,21):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (32, 0)
nbody-v2.cc(160,21):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (32, 0)
nbody-v2.cc(160,21):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (32, 0)
nbody-v2.cc(160,21):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (32, 0)
nbody-v2.cc(160,21):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (32, 0)
nbody-v2.cc(160,21):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (32, 0)
nbody-v2.cc(103,36):remark #34051: REGISTER ALLOCATION : [main] nbody-v2.cc:103

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   63[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm31 k0-k7]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   46[ rax rdx rcx rbx rsi rdi r8-r15 zmm0-zmm31]
        
    Routine temporaries
        Total         :     764
            Global    :     163
            Local     :     601
        Regenerable   :     250
        Spilled       :       5
        
    Routine stack
        Variables     :    6624 bytes*
            Reads     :      23 [0.00e+00 ~ 0.0%]
            Writes    :     389 [1.80e+03 ~ 25.0%]
        Spills        :      80 bytes*
            Reads     :      19 [4.07e+02 ~ 5.6%]
            Writes    :      15 [1.04e+02 ~ 1.4%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: Newton(size_t, size_t, size_t, real)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (Newton(size_t, size_t, size_t, real)) [2/13=15.4%] nbody-v2.cc(61,56)


    Report from: OpenMP optimizations [openmp]

OpenMP Construct at nbody-v2.cc(66,5)
remark #16201: OpenMP DEFINED REGION WAS PARALLELIZED

    Report from: Offload optimizations [offload]

OFFLOAD:Newton(65,5):  Offload to target MIC 1
 Evaluate length/align/alloc_if/free_if/alloc/into expressions
   Modifier expression assigned to __offload_alloc_if.19
   Modifier expression assigned to __offload_free_if.20
   Modifier expression assigned to __offload_alloc_if.22
   Modifier expression assigned to __offload_free_if.23
   Modifier expression assigned to __offload_alloc_if.25
   Modifier expression assigned to __offload_free_if.26
   Modifier expression assigned to __offload_alloc_if.28
   Modifier expression assigned to __offload_free_if.29
   Modifier expression assigned to __offload_alloc_if.31
   Modifier expression assigned to __offload_free_if.32
   Modifier expression assigned to __offload_alloc_if.34
   Modifier expression assigned to __offload_free_if.35
   Modifier expression assigned to __offload_alloc_if.37
   Modifier expression assigned to __offload_free_if.38
 Data sent from host to target
       n0, scalar size 8 bytes
       n1, scalar size 8 bytes
       n, scalar size 8 bytes
       dtG, scalar size 8 bytes
       dt, scalar size 8 bytes
 Data received by host from target
       x, pointer to array reference expression with base
       y, pointer to array reference expression with base
       z, pointer to array reference expression with base
       m, pointer to array reference expression with base
       vx, pointer to array reference expression with base
       vy, pointer to array reference expression with base
       vz, pointer to array reference expression with base


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at nbody-v2.cc(68,9)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at nbody-v2.cc(69,9)
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at nbody-v2.cc(72,13)
      <Peeled loop for vectorization>
         remark #15389: vectorization support: reference *x[j] has unaligned access   [ nbody-v2.cc(73,27) ]
         remark #15389: vectorization support: reference *y[j] has unaligned access   [ nbody-v2.cc(73,45) ]
         remark #15389: vectorization support: reference *z[j] has unaligned access   [ nbody-v2.cc(73,63) ]
         remark #15389: vectorization support: reference *m[j] has unaligned access   [ nbody-v2.cc(75,35) ]
         remark #15381: vectorization support: unaligned access used inside loop body
         remark #15305: vectorization support: vector length 4
         remark #15309: vectorization support: normalized vectorization overhead 0.350
         remark #15301: PEEL LOOP WAS VECTORIZED
      LOOP END

      LOOP BEGIN at nbody-v2.cc(72,13)
         remark #15389: vectorization support: reference *x[j] has unaligned access   [ nbody-v2.cc(73,27) ]
         remark #15389: vectorization support: reference *y[j] has unaligned access   [ nbody-v2.cc(73,45) ]
         remark #15389: vectorization support: reference *z[j] has unaligned access   [ nbody-v2.cc(73,63) ]
         remark #15389: vectorization support: reference *m[j] has unaligned access   [ nbody-v2.cc(75,35) ]
         remark #15381: vectorization support: unaligned access used inside loop body
         remark #15305: vectorization support: vector length 4
         remark #15309: vectorization support: normalized vectorization overhead 0.913
         remark #15301: OpenMP SIMD LOOP WAS VECTORIZED
         remark #15321: Compiler has chosen to target XMM/YMM vector. Try using -qopt-zmm-usage=high to override
         remark #15450: unmasked unaligned unit stride loads: 4 
         remark #15475: --- begin vector cost summary ---
         remark #15476: scalar cost: 100 
         remark #15477: vector cost: 26.000 
         remark #15478: estimated potential speedup: 3.650 
         remark #15488: --- end vector cost summary ---
      LOOP END

      LOOP BEGIN at nbody-v2.cc(81,13)
      <Peeled loop for vectorization>
         remark #15389: vectorization support: reference *x[j] has unaligned access   [ nbody-v2.cc(82,27) ]
         remark #15389: vectorization support: reference *y[j] has unaligned access   [ nbody-v2.cc(82,45) ]
         remark #15389: vectorization support: reference *z[j] has unaligned access   [ nbody-v2.cc(82,63) ]
         remark #15389: vectorization support: reference *m[j] has unaligned access   [ nbody-v2.cc(84,35) ]
         remark #15381: vectorization support: unaligned access used inside loop body
         remark #15305: vectorization support: vector length 4
         remark #15309: vectorization support: normalized vectorization overhead 0.350
         remark #15301: PEEL LOOP WAS VECTORIZED
      LOOP END

      LOOP BEGIN at nbody-v2.cc(81,13)
         remark #15389: vectorization support: reference *x[j] has unaligned access   [ nbody-v2.cc(82,27) ]
         remark #15389: vectorization support: reference *y[j] has unaligned access   [ nbody-v2.cc(82,45) ]
         remark #15389: vectorization support: reference *z[j] has unaligned access   [ nbody-v2.cc(82,63) ]
         remark #15389: vectorization support: reference *m[j] has unaligned access   [ nbody-v2.cc(84,35) ]
         remark #15381: vectorization support: unaligned access used inside loop body
         remark #15305: vectorization support: vector length 4
         remark #15309: vectorization support: normalized vectorization overhead 0.913
         remark #15301: OpenMP SIMD LOOP WAS VECTORIZED
         remark #15321: Compiler has chosen to target XMM/YMM vector. Try using -qopt-zmm-usage=high to override
         remark #15450: unmasked unaligned unit stride loads: 4 
         remark #15475: --- begin vector cost summary ---
         remark #15476: scalar cost: 100 
         remark #15477: vector cost: 26.000 
         remark #15478: estimated potential speedup: 3.650 
         remark #15488: --- end vector cost summary ---
      LOOP END

      LOOP BEGIN at nbody-v2.cc(72,13)
      <Remainder loop for vectorization>
         remark #15389: vectorization support: reference *x[j] has unaligned access   [ nbody-v2.cc(73,27) ]
         remark #15389: vectorization support: reference *y[j] has unaligned access   [ nbody-v2.cc(73,45) ]
         remark #15389: vectorization support: reference *z[j] has unaligned access   [ nbody-v2.cc(73,63) ]
         remark #15389: vectorization support: reference *m[j] has unaligned access   [ nbody-v2.cc(75,35) ]
         remark #15381: vectorization support: unaligned access used inside loop body
         remark #15305: vectorization support: vector length 4
         remark #15309: vectorization support: normalized vectorization overhead 0.350
         remark #15301: REMAINDER LOOP WAS VECTORIZED
      LOOP END

      LOOP BEGIN at nbody-v2.cc(81,13)
      <Remainder loop for vectorization>
         remark #15389: vectorization support: reference *x[j] has unaligned access   [ nbody-v2.cc(82,27) ]
         remark #15389: vectorization support: reference *y[j] has unaligned access   [ nbody-v2.cc(82,45) ]
         remark #15389: vectorization support: reference *z[j] has unaligned access   [ nbody-v2.cc(82,63) ]
         remark #15389: vectorization support: reference *m[j] has unaligned access   [ nbody-v2.cc(84,35) ]
         remark #15381: vectorization support: unaligned access used inside loop body
         remark #15305: vectorization support: vector length 4
         remark #15309: vectorization support: normalized vectorization overhead 0.350
         remark #15301: REMAINDER LOOP WAS VECTORIZED
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at nbody-v2.cc(93,9)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at nbody-v2.cc(93,9)
   <Peeled loop for vectorization>
      remark #15389: vectorization support: reference *(*x+i*8) has unaligned access   [ nbody-v2.cc(95,13) ]
      remark #15389: vectorization support: reference *(*x+i*8) has unaligned access   [ nbody-v2.cc(95,13) ]
      remark #15389: vectorization support: reference *vx[i] has unaligned access   [ nbody-v2.cc(95,21) ]
      remark #15389: vectorization support: reference *(*y+i*8) has unaligned access   [ nbody-v2.cc(96,13) ]
      remark #15389: vectorization support: reference *(*y+i*8) has unaligned access   [ nbody-v2.cc(96,13) ]
      remark #15389: vectorization support: reference *vy[i] has unaligned access   [ nbody-v2.cc(96,21) ]
      remark #15389: vectorization support: reference *(*z+i*8) has unaligned access   [ nbody-v2.cc(97,13) ]
      remark #15389: vectorization support: reference *(*z+i*8) has unaligned access   [ nbody-v2.cc(97,13) ]
      remark #15389: vectorization support: reference *vz[i] has unaligned access   [ nbody-v2.cc(97,21) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15335: peel loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
      remark #15305: vectorization support: vector length 2
      remark #15309: vectorization support: normalized vectorization overhead 0.255
      remark #25015: Estimate of max trip count of loop=3
   LOOP END

   LOOP BEGIN at nbody-v2.cc(93,9)
      remark #15389: vectorization support: reference *(*x+i*8) has unaligned access   [ nbody-v2.cc(95,13) ]
      remark #15389: vectorization support: reference *(*x+i*8) has unaligned access   [ nbody-v2.cc(95,13) ]
      remark #15389: vectorization support: reference *vx[i] has unaligned access   [ nbody-v2.cc(95,21) ]
      remark #15389: vectorization support: reference *(*y+i*8) has unaligned access   [ nbody-v2.cc(96,13) ]
      remark #15389: vectorization support: reference *(*y+i*8) has unaligned access   [ nbody-v2.cc(96,13) ]
      remark #15389: vectorization support: reference *vy[i] has unaligned access   [ nbody-v2.cc(96,21) ]
      remark #15389: vectorization support: reference *(*z+i*8) has unaligned access   [ nbody-v2.cc(97,13) ]
      remark #15389: vectorization support: reference *(*z+i*8) has unaligned access   [ nbody-v2.cc(97,13) ]
      remark #15389: vectorization support: reference *vz[i] has unaligned access   [ nbody-v2.cc(97,21) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 4
      remark #15309: vectorization support: normalized vectorization overhead 1.132
      remark #15301: OpenMP SIMD LOOP WAS VECTORIZED
      remark #15321: Compiler has chosen to target XMM/YMM vector. Try using -qopt-zmm-usage=high to override
      remark #15450: unmasked unaligned unit stride loads: 6 
      remark #15451: unmasked unaligned unit stride stores: 3 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 35 
      remark #15477: vector cost: 9.500 
      remark #15478: estimated potential speedup: 3.500 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at nbody-v2.cc(93,9)
   <Remainder loop for vectorization>
      remark #15389: vectorization support: reference *(*x+i*8) has unaligned access   [ nbody-v2.cc(95,13) ]
      remark #15389: vectorization support: reference *(*x+i*8) has unaligned access   [ nbody-v2.cc(95,13) ]
      remark #15389: vectorization support: reference *vx[i] has unaligned access   [ nbody-v2.cc(95,21) ]
      remark #15389: vectorization support: reference *(*y+i*8) has unaligned access   [ nbody-v2.cc(96,13) ]
      remark #15389: vectorization support: reference *(*y+i*8) has unaligned access   [ nbody-v2.cc(96,13) ]
      remark #15389: vectorization support: reference *vy[i] has unaligned access   [ nbody-v2.cc(96,21) ]
      remark #15389: vectorization support: reference *(*z+i*8) has unaligned access   [ nbody-v2.cc(97,13) ]
      remark #15389: vectorization support: reference *(*z+i*8) has unaligned access   [ nbody-v2.cc(97,13) ]
      remark #15389: vectorization support: reference *vz[i] has unaligned access   [ nbody-v2.cc(97,21) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15335: remainder loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
      remark #15305: vectorization support: vector length 2
      remark #15309: vectorization support: normalized vectorization overhead 0.255
   LOOP END
LOOP END

    Report from: Code generation optimizations [cg]

nbody-v2.cc(65,5):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (32, 0)
nbody-v2.cc(65,5):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (32, 0)
nbody-v2.cc(65,5):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (32, 0)
nbody-v2.cc(65,5):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (32, 0)
nbody-v2.cc(65,5):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (32, 0)
nbody-v2.cc(65,5):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (32, 0)
nbody-v2.cc(65,5):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (32, 0)
nbody-v2.cc(65,5):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (32, 0)
nbody-v2.cc(65,5):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (32, 0)
nbody-v2.cc(65,5):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (32, 0)
nbody-v2.cc(65,5):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (32, 0)
nbody-v2.cc(65,5):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (32, 0)
nbody-v2.cc(65,5):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (32, 0)
nbody-v2.cc(65,5):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (32, 0)
nbody-v2.cc(65,5):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (32, 0)
nbody-v2.cc(65,5):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (32, 0)
nbody-v2.cc(65,5):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (32, 0)
nbody-v2.cc(65,5):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (32, 0)
nbody-v2.cc(65,5):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (32, 0)
nbody-v2.cc(65,5):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (32, 0)
nbody-v2.cc(65,5):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (32, 0), and destination (alignment, offset): (32, 0)
nbody-v2.cc(61,56):remark #34051: REGISTER ALLOCATION : [_Z6Newtonmmmd] nbody-v2.cc:61

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   63[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm31 k0-k7]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   47[ rax rdx rcx rbx rsi rdi r8-r15 zmm0-zmm31 k1]
        
    Routine temporaries
        Total         :     674
            Global    :     133
            Local     :     541
        Regenerable   :     187
        Spilled       :      37
        
    Routine stack
        Variables     :    2548 bytes*
            Reads     :       6 [1.38e+01 ~ 0.3%]
            Writes    :     130 [4.70e+01 ~ 0.9%]
        Spills        :     344 bytes*
            Reads     :      81 [1.41e+02 ~ 2.7%]
            Writes    :      57 [9.40e+01 ~ 1.8%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: std::char_traits<char>::length(const std::char_traits<char>::char_type *)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (std::char_traits<char>::length(const std::char_traits<char>::char_type *)) [6/13=46.2%] /usr/include/c++/4.8.5/bits/char_traits.h(259,7)
  -> EXTERN: (259,16) __builtin_strlen(const char *)


    Report from: Code generation optimizations [cg]

/usr/include/c++/4.8.5/bits/char_traits.h(259,7):remark #34051: REGISTER ALLOCATION : [_ZNSt11char_traitsIcE6lengthEPKc] /usr/include/c++/4.8.5/bits/char_traits.h:259

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   63[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm31 k0-k7]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    3[ rax rdx rdi]
        
    Routine temporaries
        Total         :      12
            Global    :       7
            Local     :       5
        Regenerable   :       0
        Spilled       :       0
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: randomFill(real *&, real, real, size_t)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (randomFill(real *&, real, real, size_t)) [8/13=61.5%] nbody-v2.cc(31,59)
  -> EXTERN: (32,18) operator new[](std::size_t)
  -> EXTERN: (35,16) rand()


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at nbody-v2.cc(34,5)
   remark #15527: loop was not vectorized: function call to rand() cannot be vectorized   [ nbody-v2.cc(35,16) ]
LOOP END

    Report from: Code generation optimizations [cg]

nbody-v2.cc(31,59):remark #34051: REGISTER ALLOCATION : [_Z10randomFillRPdddm] nbody-v2.cc:31

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   63[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm31 k0-k7]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    8[ rax rsi rdi r12-r14 zmm0-zmm1]
        
    Routine temporaries
        Total         :      25
            Global    :      16
            Local     :       9
        Regenerable   :       0
        Spilled       :       6
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :      32 bytes*
            Reads     :       5 [1.29e+01 ~ 13.9%]
            Writes    :       4 [3.80e+00 ~ 4.1%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: bodies(size_t)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (bodies(size_t)) [9/13=69.2%] nbody-v2.cc(39,25)
  -> INLINE: (40,5) randomFill(real *&, real, real, size_t) (isz = 27) (sz = 38)
    -> EXTERN: (32,18) operator new[](std::size_t)
    -> EXTERN: (35,16) rand()
  -> INLINE: (41,5) randomFill(real *&, real, real, size_t) (isz = 27) (sz = 38)
    -> EXTERN: (32,18) operator new[](std::size_t)
    -> EXTERN: (35,16) rand()
  -> INLINE: (42,5) randomFill(real *&, real, real, size_t) (isz = 27) (sz = 38)
    -> EXTERN: (32,18) operator new[](std::size_t)
    -> EXTERN: (35,16) rand()
  -> INLINE: (43,5) randomFill(real *&, real, real, size_t) (isz = 27) (sz = 38)
    -> EXTERN: (32,18) operator new[](std::size_t)
    -> EXTERN: (35,16) rand()
  -> INLINE: (44,5) randomFill(real *&, real, real, size_t) (isz = 27) (sz = 38)
    -> EXTERN: (32,18) operator new[](std::size_t)
    -> EXTERN: (35,16) rand()
  -> INLINE: (45,5) randomFill(real *&, real, real, size_t) (isz = 27) (sz = 38)
    -> EXTERN: (32,18) operator new[](std::size_t)
    -> EXTERN: (35,16) rand()
  -> INLINE: (46,5) randomFill(real *&, real, real, size_t) (isz = 27) (sz = 38)
    -> EXTERN: (32,18) operator new[](std::size_t)
    -> EXTERN: (35,16) rand()


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at nbody-v2.cc(34,5) inlined into nbody-v2.cc(40,5)
   remark #15527: loop was not vectorized: function call to rand() cannot be vectorized   [ nbody-v2.cc(35,16) ]
LOOP END

LOOP BEGIN at nbody-v2.cc(34,5) inlined into nbody-v2.cc(41,5)
   remark #15527: loop was not vectorized: function call to rand() cannot be vectorized   [ nbody-v2.cc(35,16) ]
LOOP END

LOOP BEGIN at nbody-v2.cc(34,5) inlined into nbody-v2.cc(42,5)
   remark #15527: loop was not vectorized: function call to rand() cannot be vectorized   [ nbody-v2.cc(35,16) ]
LOOP END

LOOP BEGIN at nbody-v2.cc(34,5) inlined into nbody-v2.cc(43,5)
   remark #15527: loop was not vectorized: function call to rand() cannot be vectorized   [ nbody-v2.cc(35,16) ]
LOOP END

LOOP BEGIN at nbody-v2.cc(34,5) inlined into nbody-v2.cc(44,5)
   remark #15527: loop was not vectorized: function call to rand() cannot be vectorized   [ nbody-v2.cc(35,16) ]
LOOP END

LOOP BEGIN at nbody-v2.cc(34,5) inlined into nbody-v2.cc(45,5)
   remark #15527: loop was not vectorized: function call to rand() cannot be vectorized   [ nbody-v2.cc(35,16) ]
LOOP END

LOOP BEGIN at nbody-v2.cc(34,5) inlined into nbody-v2.cc(46,5)
   remark #15527: loop was not vectorized: function call to rand() cannot be vectorized   [ nbody-v2.cc(35,16) ]
LOOP END

    Report from: Code generation optimizations [cg]

nbody-v2.cc(39,25):remark #34051: REGISTER ALLOCATION : [_Z6bodiesm] nbody-v2.cc:39

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   63[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm31 k0-k7]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    9[ rax rdx rdi r12-r15 zmm0-zmm1]
        
    Routine temporaries
        Total         :      90
            Global    :      62
            Local     :      28
        Regenerable   :      13
        Spilled       :       4
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: cleanBodies()

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (cleanBodies()) [10/13=76.9%] nbody-v2.cc(49,20)
  -> EXTERN: (50,5) operator delete[](void *)
  -> EXTERN: (51,5) operator delete[](void *)
  -> EXTERN: (52,5) operator delete[](void *)
  -> EXTERN: (53,5) operator delete[](void *)
  -> EXTERN: (54,5) operator delete[](void *)
  -> EXTERN: (55,5) operator delete[](void *)
  -> EXTERN: (56,5) operator delete[](void *)


    Report from: Code generation optimizations [cg]

nbody-v2.cc(49,20):remark #34051: REGISTER ALLOCATION : [_Z11cleanBodiesv] nbody-v2.cc:49

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   63[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm31 k0-k7]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    1[ rdi]
        
    Routine temporaries
        Total         :      20
            Global    :      13
            Local     :       7
        Regenerable   :       0
        Spilled       :       0
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

Begin optimization report for: std::operator|(std::_Ios_Iostate, std::_Ios_Iostate)

    Report from: Interprocedural optimizations [ipo]

DEAD STATIC FUNCTION: (std::operator|(std::_Ios_Iostate, std::_Ios_Iostate)) /usr/include/c++/4.8.5/bits/ios_base.h(158,3)

===========================================================================

Begin optimization report for: __sti__$E()

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (__sti__$E()) [13/13=100.0%] <compiler generated>
  -> EXTERN: /usr/include/c++/4.8.5/iostream:(74,25) __cxa_atexit(void (*)(void *), void *, void *)
  -> EXTERN: /usr/include/c++/4.8.5/iostream:(74,25) std::ios_base::Init::Init(std::ios_base::Init *)


    Report from: Code generation optimizations [cg]

<compiler generated>:remark #34051: REGISTER ALLOCATION : [__sti__$E] (null):0

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   63[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm31 k0-k7]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    3[ rdx rsi rdi]
        
    Routine temporaries
        Total         :      13
            Global    :       7
            Local     :       6
        Regenerable   :       7
        Spilled       :       0
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

    Report from: Interprocedural optimizations [ipo]

INLINING FOOTNOTES:

<1> The routine declaration is annotated with "__attribute__((noinline))".  
    Remove this annotation to permit the compiler to inline this routine.

Intel(R) Advisor can now assist with vectorization and show optimization
  report messages with your source code.
See "https://software.intel.com/en-us/intel-advisor-xe" for details.

Intel(R) C++ Intel(R) 64 Compiler for applications running on Intel(R) 64, Version 18.0.1.163 Build 20171018

Compiler options:  -O3 -fopenmp -fp-model fast=2 -qopt-report=5 -g -xhost -DDOUBLE -o nbody-v2d

    Report from: Interprocedural optimizations [ipo]

  WHOLE PROGRAM (SAFE) [EITHER METHOD]: false
  WHOLE PROGRAM (SEEN) [TABLE METHOD]: false
  WHOLE PROGRAM (READ) [OBJECT READER METHOD]: false

INLINING OPTION VALUES:
  -inline-factor: 100
  -inline-min-size: 30
  -inline-max-size: 230
  -inline-max-total-size: 2000
  -inline-max-per-routine: 10000
  -inline-max-per-compile: 500000

In the inlining report below:
   "sz" refers to the "size" of the routine. The smaller a routine's size,
      the more likely it is to be inlined.
   "isz" refers to the "inlined size" of the routine. This is the amount
      the calling routine will grow if the called routine is inlined into it.
      The compiler generally limits the amount a routine can grow by having
      routines inlined into it.

*MIC* Begin optimization report for: main(int, char **)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (main(int, char **)) [1/5=20.0%] nbody-v2.cc(103,36)
  -> INLINE: (106,5) bodies(size_t) (isz = 229) (sz = 234)
    -> INLINE: (40,5) randomFill(real *&, real, real, size_t) (isz = 27) (sz = 38)
      -> EXTERN: (32,18) operator new[](unsigned long)
      -> EXTERN: (35,16) rand
    -> INLINE: (41,5) randomFill(real *&, real, real, size_t) (isz = 27) (sz = 38)
      -> EXTERN: (32,18) operator new[](unsigned long)
      -> EXTERN: (35,16) rand
    -> INLINE: (42,5) randomFill(real *&, real, real, size_t) (isz = 27) (sz = 38)
      -> EXTERN: (32,18) operator new[](unsigned long)
      -> EXTERN: (35,16) rand
    -> INLINE: (43,5) randomFill(real *&, real, real, size_t) (isz = 27) (sz = 38)
      -> EXTERN: (32,18) operator new[](unsigned long)
      -> EXTERN: (35,16) rand
    -> INLINE: (44,5) randomFill(real *&, real, real, size_t) (isz = 27) (sz = 38)
      -> EXTERN: (32,18) operator new[](unsigned long)
      -> EXTERN: (35,16) rand
    -> INLINE: (45,5) randomFill(real *&, real, real, size_t) (isz = 27) (sz = 38)
      -> EXTERN: (32,18) operator new[](unsigned long)
      -> EXTERN: (35,16) rand
    -> INLINE: (46,5) randomFill(real *&, real, real, size_t) (isz = 27) (sz = 38)
      -> EXTERN: (32,18) operator new[](unsigned long)
      -> EXTERN: (35,16) rand
  -> EXTERN: (113,5) omp_set_nested
  -> EXTERN: (121,10) std::basic_ostream<char, std::char_traits<char> >& std::operator<< <std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*)
  -> EXTERN: (122,10) std::basic_ostream<char, std::char_traits<char> >& std::operator<< <std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*)
  -> EXTERN: (122,49) std::ostream::operator<<(double)
  -> EXTERN: (122,57) std::basic_ostream<char, std::char_traits<char> >& std::operator<< <std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char)
  -> EXTERN: (122,64) std::ostream::operator<<(double)
  -> EXTERN: (122,72) std::basic_ostream<char, std::char_traits<char> >& std::operator<< <std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char)
  -> EXTERN: (122,79) std::ostream::operator<<(double)
  -> EXTERN: (122,87) std::basic_ostream<char, std::char_traits<char> >& std::operator<< <std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*)
  -> EXTERN: (123,10) std::basic_ostream<char, std::char_traits<char> >& std::operator<< <std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*)
  -> EXTERN: (123,48) std::ostream::operator<<(double)
  -> EXTERN: (123,58) std::basic_ostream<char, std::char_traits<char> >& std::operator<< <std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char)
  -> EXTERN: (123,65) std::ostream::operator<<(double)
  -> EXTERN: (123,75) std::basic_ostream<char, std::char_traits<char> >& std::operator<< <std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char)
  -> EXTERN: (123,82) std::ostream::operator<<(double)
  -> EXTERN: (123,92) std::basic_ostream<char, std::char_traits<char> >& std::operator<< <std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*)
  -> EXTERN: (125,17) omp_get_wtime
  -> EXTERN: (137,29) omp_get_thread_num
  -> EXTERN: (144,29) omp_get_wtime
  -> (146,17) Newton(size_t, size_t, size_t, real) (isz = 235) (sz = 246)
     [[ Called routine is noinline  <1>]]
  -> EXTERN: (147,28) omp_get_wtime
  -> EXTERN: (168,10) omp_get_wtime
  -> EXTERN: (170,10) std::basic_ostream<char, std::char_traits<char> >& std::operator<< <std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*)
  -> EXTERN: (171,10) std::basic_ostream<char, std::char_traits<char> >& std::operator<< <std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*)
  -> EXTERN: (171,49) std::ostream::operator<<(double)
  -> EXTERN: (171,57) std::basic_ostream<char, std::char_traits<char> >& std::operator<< <std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char)
  -> EXTERN: (171,64) std::ostream::operator<<(double)
  -> EXTERN: (171,72) std::basic_ostream<char, std::char_traits<char> >& std::operator<< <std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char)
  -> EXTERN: (171,79) std::ostream::operator<<(double)
  -> EXTERN: (171,87) std::basic_ostream<char, std::char_traits<char> >& std::operator<< <std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*)
  -> EXTERN: (172,10) std::basic_ostream<char, std::char_traits<char> >& std::operator<< <std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*)
  -> EXTERN: (172,48) std::ostream::operator<<(double)
  -> EXTERN: (172,58) std::basic_ostream<char, std::char_traits<char> >& std::operator<< <std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char)
  -> EXTERN: (172,65) std::ostream::operator<<(double)
  -> EXTERN: (172,75) std::basic_ostream<char, std::char_traits<char> >& std::operator<< <std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char)
  -> EXTERN: (172,82) std::ostream::operator<<(double)
  -> EXTERN: (172,92) std::basic_ostream<char, std::char_traits<char> >& std::operator<< <std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*)
  -> EXTERN: (173,10) std::basic_ostream<char, std::char_traits<char> >& std::operator<< <std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*)
  -> EXTERN: (173,25) std::ostream::operator<<(double)
  -> EXTERN: (173,31) std::basic_ostream<char, std::char_traits<char> >& std::operator<< <std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*)
  -> INLINE: (175,5) cleanBodies() (isz = 41) (sz = 44)
    -> EXTERN: (50,5) operator delete[](void*)
    -> EXTERN: (51,5) operator delete[](void*)
    -> EXTERN: (52,5) operator delete[](void*)
    -> EXTERN: (53,5) operator delete[](void*)
    -> EXTERN: (54,5) operator delete[](void*)
    -> EXTERN: (55,5) operator delete[](void*)
    -> EXTERN: (56,5) operator delete[](void*)


    Report from: OpenMP optimizations [openmp]

OpenMP Construct at nbody-v2.cc(151,17)
remark #16207: OpenMP multithreaded code generation for BARRIER was successful

    Report from: Offload optimizations [offload]

OFFLOAD:main(129,5):  Outlined offload region
 Data received by target from host
       x, pointer to array reference expression with base
       y, pointer to array reference expression with base
       z, pointer to array reference expression with base
       vx, pointer to array reference expression with base
       vy, pointer to array reference expression with base
       vz, pointer to array reference expression with base
       m, pointer to array reference expression with base
 Data sent from target to host

OFFLOAD:main(157,21):  Outlined offload region
 Data received by target from host
       __$Uf_V$96, scalar size 8 bytes
       __$U10_V$97, scalar size 8 bytes
       __$U11_V$98, scalar size 8 bytes
       __$U12_V$99, scalar size 8 bytes
       __$U13_V$9a, scalar size 8 bytes
       __$U14_V$9b, scalar size 8 bytes
 Data sent from target to host
       x, pointer to array reference expression with base
       y, pointer to array reference expression with base
       z, pointer to array reference expression with base
       vx, pointer to array reference expression with base
       vy, pointer to array reference expression with base
       vz, pointer to array reference expression with base

OFFLOAD:main(160,21):  Outlined offload region
 Data received by target from host
       __$U15_V$9c, scalar size 8 bytes
       __$U16_V$9d, scalar size 8 bytes
       __$U17_V$9e, scalar size 8 bytes
       __$U18_V$9f, scalar size 8 bytes
       __$U19_V$a0, scalar size 8 bytes
       __$U1a_V$a1, scalar size 8 bytes
       __$U1b_V$a2, scalar size 8 bytes
       __$U1c_V$a3, scalar size 8 bytes
       __$U1d_V$a4, scalar size 8 bytes
       __$U1e_V$a5, scalar size 8 bytes
       __$U1f_V$a6, scalar size 8 bytes
       __$U20_V$a7, scalar size 8 bytes
       x, pointer to array reference expression with base
       y, pointer to array reference expression with base
       z, pointer to array reference expression with base
       vx, pointer to array reference expression with base
       vy, pointer to array reference expression with base
       vz, pointer to array reference expression with base
 Data sent from target to host

OpenMP Construct at nbody-v2.cc(154,17)
remark #16204: OpenMP multithreaded code generation for SINGLE was successful

    Report from: OpenMP optimizations [openmp]

OpenMP Construct at nbody-v2.cc(133,9)
remark #16201: OpenMP DEFINED REGION WAS PARALLELIZED

    Report from: Offload optimizations [offload]

OFFLOAD:main(167,5):  Outlined offload region
 Data received by target from host
 Data sent from target to host


    Report from: Code generation optimizations [cg]

nbody-v2.cc(167,5):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (64, 0), and destination (alignment, offset): (64, 0)
nbody-v2.cc(167,5):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (64, 0), and destination (alignment, offset): (64, 0)
nbody-v2.cc(160,21):remark #34026: call to memcpy implemented as a call to optimized library version
nbody-v2.cc(160,21):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (64, 0), and destination (alignment, offset): (64, 0)
nbody-v2.cc(157,21):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (64, 0), and destination (alignment, offset): (64, 0)
nbody-v2.cc(157,21):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (64, 0), and destination (alignment, offset): (64, 0)
nbody-v2.cc(129,5):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (64, 0), and destination (alignment, offset): (64, 0)
nbody-v2.cc(129,5):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (64, 0), and destination (alignment, offset): (64, 0)
nbody-v2.cc(103,36):remark #34051: REGISTER ALLOCATION : [main] nbody-v2.cc:103

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   63[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm31 k0-k7]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   24[ rax rdx rcx rbx rsi rdi r8-r15 zmm0-zmm1 zmm16-zmm23]
        
    Routine temporaries
        Total         :     182
            Global    :       9
            Local     :     173
        Regenerable   :      67
        Spilled       :       0
        
    Routine stack
        Variables     :    3684 bytes*
            Reads     :      10 [4.04e+02 ~ 2.3%]
            Writes    :      26 [2.00e+03 ~ 11.4%]
        Spills        :      40 bytes*
            Reads     :      30 [1.01e+03 ~ 5.8%]
            Writes    :      30 [1.01e+03 ~ 5.8%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

*MIC* Begin optimization report for: Newton(size_t, size_t, size_t, real)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (Newton(size_t, size_t, size_t, real)) [2/5=40.0%] nbody-v2.cc(61,56)


    Report from: OpenMP optimizations [openmp]

OpenMP Construct at nbody-v2.cc(66,5)
remark #16201: OpenMP DEFINED REGION WAS PARALLELIZED

    Report from: Offload optimizations [offload]

OFFLOAD:_Z6Newtonmmmd(65,5):  Outlined offload region
 Data received by target from host
       n0, scalar size 8 bytes
       n1, scalar size 8 bytes
       n, scalar size 8 bytes
       dtG, scalar size 8 bytes
       dt, scalar size 8 bytes
 Data sent from target to host
       x, pointer to array reference expression with base
       y, pointer to array reference expression with base
       z, pointer to array reference expression with base
       m, pointer to array reference expression with base
       vx, pointer to array reference expression with base
       vy, pointer to array reference expression with base
       vz, pointer to array reference expression with base


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at nbody-v2.cc(68,9)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at nbody-v2.cc(69,9)
      remark #15542: loop was not vectorized: inner loop was already vectorized

      LOOP BEGIN at nbody-v2.cc(72,13)
      <Peeled loop for vectorization>
         remark #15389: vectorization support: reference *x[j] has unaligned access   [ nbody-v2.cc(73,27) ]
         remark #15389: vectorization support: reference *y[j] has unaligned access   [ nbody-v2.cc(73,45) ]
         remark #15389: vectorization support: reference *z[j] has unaligned access   [ nbody-v2.cc(73,63) ]
         remark #15389: vectorization support: reference *m[j] has unaligned access   [ nbody-v2.cc(75,35) ]
         remark #15381: vectorization support: unaligned access used inside loop body
         remark #15305: vectorization support: vector length 8
         remark #15309: vectorization support: normalized vectorization overhead 0.350
         remark #15301: PEEL LOOP WAS VECTORIZED
      LOOP END

      LOOP BEGIN at nbody-v2.cc(72,13)
         remark #15389: vectorization support: reference *x[j] has unaligned access   [ nbody-v2.cc(73,27) ]
         remark #15389: vectorization support: reference *y[j] has unaligned access   [ nbody-v2.cc(73,45) ]
         remark #15389: vectorization support: reference *z[j] has unaligned access   [ nbody-v2.cc(73,63) ]
         remark #15389: vectorization support: reference *m[j] has unaligned access   [ nbody-v2.cc(75,35) ]
         remark #15381: vectorization support: unaligned access used inside loop body
         remark #15305: vectorization support: vector length 8
         remark #15309: vectorization support: normalized vectorization overhead 1.087
         remark #15301: OpenMP SIMD LOOP WAS VECTORIZED
         remark #15442: entire loop may be executed in remainder
         remark #15450: unmasked unaligned unit stride loads: 4 
         remark #15475: --- begin vector cost summary ---
         remark #15476: scalar cost: 100 
         remark #15477: vector cost: 13.000 
         remark #15478: estimated potential speedup: 7.020 
         remark #15488: --- end vector cost summary ---
      LOOP END

      LOOP BEGIN at nbody-v2.cc(72,13)
      <Remainder loop for vectorization>
         remark #15389: vectorization support: reference *x[j] has unaligned access   [ nbody-v2.cc(73,27) ]
         remark #15389: vectorization support: reference *y[j] has unaligned access   [ nbody-v2.cc(73,45) ]
         remark #15389: vectorization support: reference *z[j] has unaligned access   [ nbody-v2.cc(73,63) ]
         remark #15389: vectorization support: reference *m[j] has unaligned access   [ nbody-v2.cc(75,35) ]
         remark #15381: vectorization support: unaligned access used inside loop body
         remark #15305: vectorization support: vector length 8
         remark #15309: vectorization support: normalized vectorization overhead 0.350
         remark #15301: REMAINDER LOOP WAS VECTORIZED
      LOOP END

      LOOP BEGIN at nbody-v2.cc(81,13)
      <Peeled loop for vectorization>
         remark #15389: vectorization support: reference *x[j] has unaligned access   [ nbody-v2.cc(82,27) ]
         remark #15389: vectorization support: reference *y[j] has unaligned access   [ nbody-v2.cc(82,45) ]
         remark #15389: vectorization support: reference *z[j] has unaligned access   [ nbody-v2.cc(82,63) ]
         remark #15389: vectorization support: reference *m[j] has unaligned access   [ nbody-v2.cc(84,35) ]
         remark #15381: vectorization support: unaligned access used inside loop body
         remark #15305: vectorization support: vector length 8
         remark #15309: vectorization support: normalized vectorization overhead 0.350
         remark #15301: PEEL LOOP WAS VECTORIZED
      LOOP END

      LOOP BEGIN at nbody-v2.cc(81,13)
         remark #15389: vectorization support: reference *x[j] has unaligned access   [ nbody-v2.cc(82,27) ]
         remark #15389: vectorization support: reference *y[j] has unaligned access   [ nbody-v2.cc(82,45) ]
         remark #15389: vectorization support: reference *z[j] has unaligned access   [ nbody-v2.cc(82,63) ]
         remark #15389: vectorization support: reference *m[j] has unaligned access   [ nbody-v2.cc(84,35) ]
         remark #15381: vectorization support: unaligned access used inside loop body
         remark #15305: vectorization support: vector length 8
         remark #15309: vectorization support: normalized vectorization overhead 1.087
         remark #15301: OpenMP SIMD LOOP WAS VECTORIZED
         remark #15442: entire loop may be executed in remainder
         remark #15450: unmasked unaligned unit stride loads: 4 
         remark #15475: --- begin vector cost summary ---
         remark #15476: scalar cost: 100 
         remark #15477: vector cost: 13.000 
         remark #15478: estimated potential speedup: 7.020 
         remark #15488: --- end vector cost summary ---
      LOOP END

      LOOP BEGIN at nbody-v2.cc(81,13)
      <Remainder loop for vectorization>
         remark #15389: vectorization support: reference *x[j] has unaligned access   [ nbody-v2.cc(82,27) ]
         remark #15389: vectorization support: reference *y[j] has unaligned access   [ nbody-v2.cc(82,45) ]
         remark #15389: vectorization support: reference *z[j] has unaligned access   [ nbody-v2.cc(82,63) ]
         remark #15389: vectorization support: reference *m[j] has unaligned access   [ nbody-v2.cc(84,35) ]
         remark #15381: vectorization support: unaligned access used inside loop body
         remark #15305: vectorization support: vector length 8
         remark #15309: vectorization support: normalized vectorization overhead 0.350
         remark #15301: REMAINDER LOOP WAS VECTORIZED
      LOOP END
   LOOP END
LOOP END

LOOP BEGIN at nbody-v2.cc(93,9)
   remark #15542: loop was not vectorized: inner loop was already vectorized

   LOOP BEGIN at nbody-v2.cc(93,9)
   <Peeled loop for vectorization>
      remark #15389: vectorization support: reference *(*x+i*8) has unaligned access   [ nbody-v2.cc(95,13) ]
      remark #15389: vectorization support: reference *(*x+i*8) has unaligned access   [ nbody-v2.cc(95,13) ]
      remark #15389: vectorization support: reference *vx[i] has unaligned access   [ nbody-v2.cc(95,21) ]
      remark #15389: vectorization support: reference *(*y+i*8) has unaligned access   [ nbody-v2.cc(96,13) ]
      remark #15389: vectorization support: reference *(*y+i*8) has unaligned access   [ nbody-v2.cc(96,13) ]
      remark #15389: vectorization support: reference *vy[i] has unaligned access   [ nbody-v2.cc(96,21) ]
      remark #15389: vectorization support: reference *(*z+i*8) has unaligned access   [ nbody-v2.cc(97,13) ]
      remark #15389: vectorization support: reference *(*z+i*8) has unaligned access   [ nbody-v2.cc(97,13) ]
      remark #15389: vectorization support: reference *vz[i] has unaligned access   [ nbody-v2.cc(97,21) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15335: peel loop was not vectorized: vectorization possible but seems inefficient. Use vector always directive or -vec-threshold0 to override 
      remark #15305: vectorization support: vector length 2
      remark #15309: vectorization support: normalized vectorization overhead 0.255
      remark #25015: Estimate of max trip count of loop=7
   LOOP END

   LOOP BEGIN at nbody-v2.cc(93,9)
      remark #15389: vectorization support: reference *(*x+i*8) has unaligned access   [ nbody-v2.cc(95,13) ]
      remark #15389: vectorization support: reference *(*x+i*8) has unaligned access   [ nbody-v2.cc(95,13) ]
      remark #15389: vectorization support: reference *vx[i] has unaligned access   [ nbody-v2.cc(95,21) ]
      remark #15389: vectorization support: reference *(*y+i*8) has unaligned access   [ nbody-v2.cc(96,13) ]
      remark #15389: vectorization support: reference *(*y+i*8) has unaligned access   [ nbody-v2.cc(96,13) ]
      remark #15389: vectorization support: reference *vy[i] has unaligned access   [ nbody-v2.cc(96,21) ]
      remark #15389: vectorization support: reference *(*z+i*8) has unaligned access   [ nbody-v2.cc(97,13) ]
      remark #15389: vectorization support: reference *(*z+i*8) has unaligned access   [ nbody-v2.cc(97,13) ]
      remark #15389: vectorization support: reference *vz[i] has unaligned access   [ nbody-v2.cc(97,21) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 8
      remark #15309: vectorization support: normalized vectorization overhead 1.132
      remark #15301: OpenMP SIMD LOOP WAS VECTORIZED
      remark #15442: entire loop may be executed in remainder
      remark #15450: unmasked unaligned unit stride loads: 6 
      remark #15451: unmasked unaligned unit stride stores: 3 
      remark #15475: --- begin vector cost summary ---
      remark #15476: scalar cost: 35 
      remark #15477: vector cost: 4.750 
      remark #15478: estimated potential speedup: 6.710 
      remark #15488: --- end vector cost summary ---
   LOOP END

   LOOP BEGIN at nbody-v2.cc(93,9)
   <Remainder loop for vectorization>
      remark #15389: vectorization support: reference *(*x+i*8) has unaligned access   [ nbody-v2.cc(95,13) ]
      remark #15389: vectorization support: reference *(*x+i*8) has unaligned access   [ nbody-v2.cc(95,13) ]
      remark #15389: vectorization support: reference *vx[i] has unaligned access   [ nbody-v2.cc(95,21) ]
      remark #15389: vectorization support: reference *(*y+i*8) has unaligned access   [ nbody-v2.cc(96,13) ]
      remark #15389: vectorization support: reference *(*y+i*8) has unaligned access   [ nbody-v2.cc(96,13) ]
      remark #15389: vectorization support: reference *vy[i] has unaligned access   [ nbody-v2.cc(96,21) ]
      remark #15389: vectorization support: reference *(*z+i*8) has unaligned access   [ nbody-v2.cc(97,13) ]
      remark #15389: vectorization support: reference *(*z+i*8) has unaligned access   [ nbody-v2.cc(97,13) ]
      remark #15389: vectorization support: reference *vz[i] has unaligned access   [ nbody-v2.cc(97,21) ]
      remark #15381: vectorization support: unaligned access used inside loop body
      remark #15305: vectorization support: vector length 8
      remark #15309: vectorization support: normalized vectorization overhead 0.268
      remark #15301: REMAINDER LOOP WAS VECTORIZED
   LOOP END
LOOP END

    Report from: Code generation optimizations [cg]

nbody-v2.cc(65,5):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (64, 0), and destination (alignment, offset): (64, 0)
nbody-v2.cc(65,5):remark #34000: call to memcpy implemented inline with loads and stores with proven source (alignment, offset): (64, 0), and destination (alignment, offset): (64, 0)
nbody-v2.cc(61,56):remark #34051: REGISTER ALLOCATION : [_Z6Newtonmmmd] nbody-v2.cc:61

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   63[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm31 k0-k7]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   47[ rax rdx rcx rbx rsi rdi r8-r15 zmm0-zmm31 k1]
        
    Routine temporaries
        Total         :     763
            Global    :     161
            Local     :     602
        Regenerable   :     182
        Spilled       :      30
        
    Routine stack
        Variables     :    1508 bytes*
            Reads     :      31 [3.88e+01 ~ 0.6%]
            Writes    :      56 [8.80e+01 ~ 1.5%]
        Spills        :     336 bytes*
            Reads     :      86 [1.36e+02 ~ 2.3%]
            Writes    :      54 [5.19e+01 ~ 0.9%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

*MIC* Begin optimization report for: randomFill(real *&, real, real, size_t)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (randomFill(real *&, real, real, size_t)) [3/5=60.0%] nbody-v2.cc(31,59)
  -> EXTERN: (32,18) operator new[](unsigned long)
  -> EXTERN: (35,16) rand


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at nbody-v2.cc(34,5)
   remark #15527: loop was not vectorized: function call to rand cannot be vectorized   [ nbody-v2.cc(35,16) ]
LOOP END

    Report from: Code generation optimizations [cg]

nbody-v2.cc(31,59):remark #34051: REGISTER ALLOCATION : [_Z10randomFillRPdddm] nbody-v2.cc:31

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   63[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm31 k0-k7]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :   11[ rax rsi rdi r12-r14 zmm0-zmm4]
        
    Routine temporaries
        Total         :      31
            Global    :      16
            Local     :      15
        Regenerable   :       2
        Spilled       :       6
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :      48 bytes*
            Reads     :       7 [1.49e+01 ~ 14.8%]
            Writes    :       6 [5.80e+00 ~ 5.8%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

*MIC* Begin optimization report for: bodies(size_t)

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (bodies(size_t)) [4/5=80.0%] nbody-v2.cc(39,25)
  -> INLINE: (40,5) randomFill(real *&, real, real, size_t) (isz = 27) (sz = 38)
    -> EXTERN: (32,18) operator new[](unsigned long)
    -> EXTERN: (35,16) rand
  -> INLINE: (41,5) randomFill(real *&, real, real, size_t) (isz = 27) (sz = 38)
    -> EXTERN: (32,18) operator new[](unsigned long)
    -> EXTERN: (35,16) rand
  -> INLINE: (42,5) randomFill(real *&, real, real, size_t) (isz = 27) (sz = 38)
    -> EXTERN: (32,18) operator new[](unsigned long)
    -> EXTERN: (35,16) rand
  -> INLINE: (43,5) randomFill(real *&, real, real, size_t) (isz = 27) (sz = 38)
    -> EXTERN: (32,18) operator new[](unsigned long)
    -> EXTERN: (35,16) rand
  -> INLINE: (44,5) randomFill(real *&, real, real, size_t) (isz = 27) (sz = 38)
    -> EXTERN: (32,18) operator new[](unsigned long)
    -> EXTERN: (35,16) rand
  -> INLINE: (45,5) randomFill(real *&, real, real, size_t) (isz = 27) (sz = 38)
    -> EXTERN: (32,18) operator new[](unsigned long)
    -> EXTERN: (35,16) rand
  -> INLINE: (46,5) randomFill(real *&, real, real, size_t) (isz = 27) (sz = 38)
    -> EXTERN: (32,18) operator new[](unsigned long)
    -> EXTERN: (35,16) rand


    Report from: Loop nest, Vector & Auto-parallelization optimizations [loop, vec, par]


LOOP BEGIN at nbody-v2.cc(34,5) inlined into nbody-v2.cc(40,5)
   remark #15527: loop was not vectorized: function call to rand cannot be vectorized   [ nbody-v2.cc(35,16) ]
LOOP END

LOOP BEGIN at nbody-v2.cc(34,5) inlined into nbody-v2.cc(41,5)
   remark #15527: loop was not vectorized: function call to rand cannot be vectorized   [ nbody-v2.cc(35,16) ]
LOOP END

LOOP BEGIN at nbody-v2.cc(34,5) inlined into nbody-v2.cc(42,5)
   remark #15527: loop was not vectorized: function call to rand cannot be vectorized   [ nbody-v2.cc(35,16) ]
LOOP END

LOOP BEGIN at nbody-v2.cc(34,5) inlined into nbody-v2.cc(43,5)
   remark #15527: loop was not vectorized: function call to rand cannot be vectorized   [ nbody-v2.cc(35,16) ]
LOOP END

LOOP BEGIN at nbody-v2.cc(34,5) inlined into nbody-v2.cc(44,5)
   remark #15527: loop was not vectorized: function call to rand cannot be vectorized   [ nbody-v2.cc(35,16) ]
LOOP END

LOOP BEGIN at nbody-v2.cc(34,5) inlined into nbody-v2.cc(45,5)
   remark #15527: loop was not vectorized: function call to rand cannot be vectorized   [ nbody-v2.cc(35,16) ]
LOOP END

LOOP BEGIN at nbody-v2.cc(34,5) inlined into nbody-v2.cc(46,5)
   remark #15527: loop was not vectorized: function call to rand cannot be vectorized   [ nbody-v2.cc(35,16) ]
LOOP END

    Report from: Code generation optimizations [cg]

nbody-v2.cc(39,25):remark #34051: REGISTER ALLOCATION : [_Z6bodiesm] nbody-v2.cc:39

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   63[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm31 k0-k7]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    9[ rax rdx rdi r12-r15 zmm0-zmm1]
        
    Routine temporaries
        Total         :      90
            Global    :      62
            Local     :      28
        Regenerable   :      13
        Spilled       :       4
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :      32 bytes*
            Reads     :      15 [1.37e+01 ~ 2.9%]
            Writes    :      15 [1.37e+01 ~ 2.9%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

*MIC* Begin optimization report for: cleanBodies()

    Report from: Interprocedural optimizations [ipo]

INLINE REPORT: (cleanBodies()) [5/5=100.0%] nbody-v2.cc(49,20)
  -> EXTERN: (50,5) operator delete[](void*)
  -> EXTERN: (51,5) operator delete[](void*)
  -> EXTERN: (52,5) operator delete[](void*)
  -> EXTERN: (53,5) operator delete[](void*)
  -> EXTERN: (54,5) operator delete[](void*)
  -> EXTERN: (55,5) operator delete[](void*)
  -> EXTERN: (56,5) operator delete[](void*)


    Report from: Code generation optimizations [cg]

nbody-v2.cc(49,20):remark #34051: REGISTER ALLOCATION : [_Z11cleanBodiesv] nbody-v2.cc:49

    Hardware registers
        Reserved     :    2[ rsp rip]
        Available    :   63[ rax rdx rcx rbx rbp rsi rdi r8-r15 mm0-mm7 zmm0-zmm31 k0-k7]
        Callee-save  :    6[ rbx rbp r12-r15]
        Assigned     :    1[ rdi]
        
    Routine temporaries
        Total         :      20
            Global    :      13
            Local     :       7
        Regenerable   :       0
        Spilled       :       0
        
    Routine stack
        Variables     :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
        Spills        :       0 bytes*
            Reads     :       0 [0.00e+00 ~ 0.0%]
            Writes    :       0 [0.00e+00 ~ 0.0%]
    
    Notes
    
        *Non-overlapping variables and spills may share stack space,
         so the total stack size might be less than this.
    

===========================================================================

    Report from: Interprocedural optimizations [ipo]

INLINING FOOTNOTES:

<1> The routine declaration is annotated with "__attribute__((noinline))".  
    Remove this annotation to permit the compiler to inline this routine.

